- hosts: bastion
  vars:
    is_master_only:  "{{ lookup('env','GI_MASTER_ONLY') }}"
    is_one_node:  "{{ lookup('env','GI_ONENODE') }}"
    is_ocs_tainted:  "{{ lookup('env','GI_OCS_TAINTED') }}"
    internet_type:  "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    storage_type:  "{{ lookup('env','GI_STORAGE') }}"
    boot_name: "{{ lookup('env','GI_BOOTSTRAP_NAME') }}"
    domain:  "{{ lookup('env','GI_DOMAIN') }}"
    bas_ip:  "{{ lookup('env','GI_BASTION_IP') }}"
    ocadmin:  "{{ lookup('env','GI_OCADMIN') }}"
    ocadmin_password:  "{{ lookup('env','GI_OCADMIN_PWD') }}"
    storage_device: "{{ lookup('env','GI_STORAGE_DEVICE') }}"
    storage_device_size: "{{ lookup('env','GI_STORAGE_DEVICE_SIZE') }}"
    is_ics: "{{ lookup('env','GI_ICS') }}"


  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
      - { name: "GI_ONENODE", value: "{{ is_one_node }}" }
      - { name: "GI_OCS_TAINTED", value: "{{ is_ocs_tainted }}" }
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_STORAGE", value: "{{ storage_type }}" }
      - { name: "GI_BOOTSTRAP_NAME", value: "{{ boot_name }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }
      - { name: "GI_OCADMIN", value: "{{ ocadmin }}" }
      - { name: "GI_OCADMIN_PWD", value: "{{ ocadmin_password }}" }
      - { name: "GI_STORAGE_DEVICE", value: "{{ storage_device }}" }
      - { name: "GI_STORAGE_DEVICE_SIZE", value: "{{ storage_device_size }}" }
      - { name: "GI_ICS", value: "{{ is_ics }}" }
      

  - name: Set parameters for air-gapped installation
    set_fact:
      repo_user: "{{ lookup('env','GI_REPO_USER') }}"
      repo_user_password: "{{ lookup('env','GI_REPO_USER_PWD') }}"
    when: internet_type == 'A'

  - name: Check configuration parameters for air-gapped installation
    fail: msg="Variable {{ item.name }} is not set"
    loop:
      - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
      - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
    when: internet_type == 'A' and item.value == ""

  - name: Set masters array
    set_fact:
      node_ip: "{{ lookup('env', 'GI_NODE_IP').split(',') }}"
      node_mac: "{{ lookup('env', 'GI_NODE_MAC_ADDRESS').split(',') }}"
      node_name: "{{ lookup('env', 'GI_NODE_NAME').split(',') }}"

  - name: Set DB2 array
    set_fact:
      db2_ip: "{{ lookup('env', 'GI_DB2_IP').split(',') }}"
      db2_mac: "{{ lookup('env', 'GI_DB2_MAC_ADDRESS').split(',') }}"
      db2_name: "{{ lookup('env', 'GI_DB2_NAME').split(',') }}"
    when: is_one_node == 'N' and is_master_only == 'N'

  - name: Set OCS array
    set_fact:
      ocs_ip: "{{ lookup('env', 'GI_OCS_IP').split(',') }}"
      ocs_mac: "{{ lookup('env', 'GI_OCS_MAC_ADDRESS').split(',') }}"
      ocs_name: "{{ lookup('env', 'GI_OCS_NAME').split(',') }}"
    when: is_ocs_tainted == 'Y'

  - name: Set workers arrays
    set_fact:
      worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
      worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
      worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
    when: is_one_node == 'N' and is_master_only == 'N'

  - set_fact:
      rook_registry: "rook/ceph:v1.1.7"
    when: internet_type != 'A' and is_one_node == 'Y' and storage_type == 'R'

  - set_fact:
          rook_registry: "registry.{{ domain }}:5000/rook/ceph:v1.1.7"
    when: internet_type == 'A' and is_one_node == 'Y' and storage_type == 'R'

  - name: Modify etcd settings in bootstrap phase for allinone configuration
    shell:
      cmd: "oc patch etcd cluster -p='{\"spec\": {\"unsupportedConfigOverrides\": {\"useUnsupportedUnsafeNonHANonProductionUnstableEtcd\": true}}}' --type=merge"
    register: patch_status
    until: patch_status.stdout == "etcd.operator.openshift.io/cluster patched (no change)"
    retries: 80
    delay: 10
    when: is_one_node == 'Y'

  - name: Waiting for OCP cluster deployment (it takes 15-40 minutes)
    command: openshift-install --dir=../ocp wait-for bootstrap-complete

  - name: Check bootstrap availability
    command:
      cmd: "ping -c 1 {{ boot_name }}.{{ domain }}"
    register: boot_availability
    ignore_errors: yes

  - name: Stop bootstrap
    shell:
      cmd: "ssh -l core {{ boot_name }}.{{ domain }} -i ~/.ssh/cluster_id_rsa sudo shutdown -h +1"
    remote_user: core
    args:
      warn: false
    when: boot_availability.rc != 2 and boot_availability.rc != 1

  - name: Wait for boostrap shutdown
    pause:
      minutes: 1
    when: boot_availability.rc != 2 and boot_availability.rc != 1

  - name: Reconfigure DNS records
    lineinfile:
      path: /etc/dnsmasq.conf
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "^address=/api.{{ domain }}/{{ bas_ip }}", line: "address=/api.{{ domain }}/{{ node_ip[0] }}" }
      - { regexp: "^address=/api-int.{{ domain }}/{{ bas_ip }}", line: "address=/api-int.{{ domain }}/{{ node_ip[0] }}" }
      - { regexp: "^address=/.apps.{{ domain }}/{{ bas_ip }}", line: "address=/.apps.{{ domain }}/{{ node_ip[0] }}" }
    when: is_one_node == 'Y'

  - name: Remove DNS records
    lineinfile:
      path: /etc/dnsmasq.conf
      regexp: "{{ item.regexp }}"
      state: absent
    with_items:
      - { regexp: "^address=/matchbox." }
      - { regexp: "^address=/boot." }
      - { regexp: "^#TFTP" }
      - { regexp: "^tftp-" }
      - { regexp: "^enable-tftp" }
      - { regexp: "^dhcp-match" }
      - { regexp: "^dhcp-boot" }
      - { regexp: "^dhcp-userclass" }

  - name: Restart dnsmasq
    service:
      name: dnsmasq
      state: restarted
      enabled: yes

  - name: Stop unused services
    service:
      name: "{{ item.name }}"
      state: stopped
      enabled: no
    with_items:
      - { name: "matchbox" }

  - name: Stop unused services
    service:
      name: "{{ item.name }}"
      state: stopped
      enabled: no
    with_items:
      - { name: "haproxy" }
    when: is_one_node == 'Y'

  - name: Reconfigure HA Proxy
    lineinfile:
      path: /etc/haproxy/haproxy.cfg
      regexp: "{{ item.regexp }}"
      state: absent
    with_items:
      - { regexp: '^ server m0' }
    when: is_one_node == 'N'

  - name: Restart HA Proxy
    service:
      name: haproxy
      state: restarted
      enabled: yes
    when: is_one_node == 'N'

  - name: Wait - cluster stabilization
    pause:
      minutes: 15
    when: is_one_node == 'Y'

  - name: Modify etcd_quorum for all in one
    shell:
      cmd: "oc patch clusterversion version --type json -p \"$(cat ../scripts/all-in-one-etcd.yaml)\""
    when: is_one_node == 'Y'

  - name: Wait - cluster stabilization
    pause:
      minutes: 5
    when: is_one_node == 'Y'

  - name: Scale all in one
    shell:
      cmd: "{{ item }}"
    with_items:
      - oc scale --replicas=1 deployment/etcd-quorum-guard -n openshift-etcd
      - oc scale --replicas=1 ingresscontroller/default -n openshift-ingress-operator
      - oc scale --replicas=1 deployment.apps/console -n openshift-console
      - oc scale --replicas=1 deployment.apps/downloads -n openshift-console
      - oc scale --replicas=1 deployment.apps/oauth-openshift -n openshift-authentication
      - oc scale --replicas=1 deployment.apps/packageserver -n openshift-operator-lifecycle-manager
      - oc scale --replicas=1 deployment.apps/prometheus-adapter -n openshift-monitoring
      - oc scale --replicas=1 deployment.apps/thanos-querier -n openshift-monitoring
      - oc scale --replicas=1 statefulset.apps/prometheus-k8s -n openshift-monitoring
      - oc scale --replicas=1 statefulset.apps/alertmanager-main -n openshift-monitoring
    when: is_one_node == 'Y'

  - name: Wait - cluster stabilization
    pause:
      minutes: 5
    when: is_one_node == 'Y'

  - name: Modify authentication operator for all in one
    shell:
      cmd: "oc apply -f ../scripts/all-in-one-auth.yaml"
    ignore_errors: yes
    when: is_one_node == 'Y'

  - name: Wait for cluster operators
    shell:
      cmd: "oc get co --config=../ocp/auth/kubeconfig --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
    register: co_status
    until: "co_status.stdout == \"0\""
    retries: 80
    delay: 10
    when: is_one_node == 'Y'

  - name: Check cluster nodes health and approve CSR's if needed
    vars:
      node_number: "{{ node_ip|length+worker_ip|default([])|length+db2_ip|default([])|length+ocs_ip|default([])|length }}"
    shell: ../scripts/check_cluster_health.sh
    register: cluster_health
    until: node_number == cluster_health.stdout
    retries: 30
    delay: 60

  - name: Wait for cluster operators
    shell:
      cmd: "oc get co --config=../ocp/auth/kubeconfig --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
    register: co_status
    until: "co_status.stdout == \"0\""
    retries: 80
    delay: 20
    when: true

  - name: Create htpasswd file
    htpasswd:
      path: ../gi-temp/ocadmin.htpasswd
      name: "{{ ocadmin }}"
      password: "{{ ocadmin_password }}"

  - name: Register htpasswd file in OCP
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc create secret generic htpass-secret --from-file=htpasswd=../gi-temp/ocadmin.htpasswd -n openshift-config --config ../ocp/auth/kubeconfig" }
      - { cmd: "oc apply -f ../scripts/oauth_provider.yaml --config ../ocp/auth/kubeconfig" }
      - { cmd: "oc adm policy add-cluster-role-to-user cluster-admin {{ ocadmin }} --config ../ocp/auth/kubeconfig" }
    when: true
    ignore_errors: yes #if htpasswd has been imported before

  - meta: end_play
    when: false

  - name: Disable default image sources
    shell:
      cmd: "oc patch OperatorHub cluster --type json -p '[{\"op\": \"add\", \"path\": \"/spec/disableAllDefaultSources\", \"value\": true}]'"
    when: internet_type == 'A'

  - name: Unpack OLM manifests
    shell:
      cmd: tar xf ../gi-temp/manifests.tar -C ../gi-temp
      warn: false
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Identify image registry name in the import
    shell:
      cmd: "cd  ../gi-temp/manifests-redhat-operator-index;cat catalogSource.yaml | grep image | awk '{print $2}'| awk -F':' '{print $1}'"
    register: old_registry_name
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Set correct image registry mirror name in catalogSources
    shell:
      cmd: "sed -i 's/{{ old_registry_name.stdout }}/registry.{{ domain }}/g' catalogSource.yaml"
      chdir: "../gi-temp/{{ item }}"
      warn: false
    with_items:
      - manifests-redhat-operator-index
      - manifests-certified-operator-index
      - manifests-redhat-marketplace-index
      - manifests-community-operator-index
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Set correct image registry mirror name in imageContentSourcePolicy
    shell:
      cmd: "sed -i 's/{{ old_registry_name.stdout }}/registry.{{ domain }}/g' imageContentSourcePolicy.yaml"
      chdir: "../gi-temp/{{ item }}"
      warn: false
    with_items:
      - manifests-redhat-operator-index
      - manifests-certified-operator-index
      - manifests-redhat-marketplace-index
      - manifests-community-operator-index
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Configure mirrored catalogSources
    shell:
      cmd: "oc apply -f catalogSource.yaml"
      chdir: "../gi-temp/{{ item }}"
      warn: false
    with_items:
      - manifests-redhat-operator-index
      - manifests-certified-operator-index
      - manifests-redhat-marketplace-index
      - manifests-community-operator-index
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Configure mirrored imageContentSourcePolicy.yaml
    shell:
      cmd: "oc apply -f imageContentSourcePolicy.yaml"
      chdir: "../gi-temp/{{ item }}"
      warn: false
    with_items:
      - manifests-redhat-operator-index
      - manifests-certified-operator-index
      - manifests-redhat-marketplace-index
      - manifests-community-operator-index
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Wait - cluster stabilization
    pause:
      minutes: 1
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Wait for cluster operators after mirrored operator images setup (can take 20-40 minutes)
    shell:
      cmd: "oc get co --config=../ocp/auth/kubeconfig --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
    register: co_status
    until: "co_status.stdout == \"0\""
    retries: 150
    delay: 20
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Configure OCS nodes on workers
    shell:
      cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --config ../ocp/auth/kubeconfig --overwrite=true"
    with_items: "{{ worker_name+db2_name|list if worker_name|length == 2 else worker_name[:3]|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'N'

  - name: Configure OCS nodes for taint
    shell: |
      oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --config ../ocp/auth/kubeconfig --overwrite=true
      oc label nodes {{ item }}.{{ domain }} node-role.kubernetes.io/infra='' --config ../ocp/auth/kubeconfig --overwrite=true
    with_items: "{{ ocs_name|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'

  - name: Configure OCS nodes on masters
    shell:
      cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --config ../ocp/auth/kubeconfig --overwrite=true"
    with_items: "{{ node_name|list }}"
    when: storage_type == "O" and is_master_only == 'Y'

  - name: Create OCS namespaces
    shell:
      cmd: "oc create namespace {{ item }}"
    with_items:
      - openshift-local-storage
      - openshift-storage
    ignore_errors: yes
    when: storage_type == "O"

  - name: Configure local storage operator file
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"
    template:
      src: "local-storage-op.j2"
      dest: "../scripts/local-storage-op.yaml"
    when: storage_type == "O"

  - name: Configure local storage operator
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/local-storage-op.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for local storage operator
    shell:
      cmd: "oc get csv -n openshift-local-storage --kubeconfig=../ocp/auth/kubeconfig --no-headers -o custom-columns=STATUS:.status.phase"
    register: ls_operator_status
    until: "ls_operator_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Configure local storage deployment file with workers
    vars:
      nodes: "{{ worker_name+db2_name|list if worker_name|length == 2 else worker_name[:3]|list }}"
    template:
      src: "local-storage-vol.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'N'

  - name: Configure local storage deployment file in taint
    vars:
      nodes: "{{ ocs_name|list }}"
    template:
      src: "local-storage-vol-tainted.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'

  - name: Configure local storage deployment file with masters only
    vars:
      nodes: "{{ node_name|list }}"
    template:
      src: "local-storage-vol.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'Y'

  - name: Deploy local storage
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/local-storage-vol.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for local storage deployment
    shell:
      cmd: "oc get pv | grep localblock-sc | wc -l"
    register: ls_status
    until: "ls_status.stdout|int >= 3"
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Taint OCS nodes
    shell:
      cmd: "oc adm taint node {{ item }}.{{ domain }} node.ocs.openshift.io/storage=\"true\":NoSchedule"
    with_items: "{{ ocs_name|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'
    ignore_errors: yes

  - name: Configure OCS operator file
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"
    template:
      src: "ocs-op.j2"
      dest: "../scripts/ocs-op.yaml"
    when: storage_type == "O"

  - name: Configure OCS operator
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/ocs-op.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for OCS operator
    shell:
      cmd: "oc get csv -n openshift-storage --kubeconfig=../ocp/auth/kubeconfig --no-headers -o custom-columns=STATUS:.status.phase"
    register: ocs_operator_status
    until: "ocs_operator_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Configure OCS cluster deployment file
    template:
      src: "ocs-cluster.j2"
      dest: "../scripts/ocs-cluster.yaml"
    when: storage_type == "O"

  - name: Deploy OCS cluster
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/ocs-cluster.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for OCS cluster deployment
    shell:
      cmd: "oc get pvc -n openshift-storage --no-headers | grep localblock-sc | grep Bound | wc -l"
    register: ocs_status
    until: "ocs_status.stdout|int >= 3"
    retries: 60
    delay: 15
    when: storage_type == "O"

  - name: Configure OCS default storage class
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc patch storageclass ocs-storagecluster-cephfs --config ../ocp/auth/kubeconfig -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }
    when: storage_type == "O"

  - name: Configure rook-ceph nodes
    shell:
      cmd: "oc label node {{ node_name[0] }}.{{ domain }} role=storage-node --config ../ocp/auth/kubeconfig --overwrite=true"
    when: storage_type == "R" and is_one_node == 'Y'

  - name: Configure common rook settings
    shell:
      cmd: "oc apply -f ../scripts/{{ 'rook-common.yaml' if is_one_node == 'Y' else 'rook-common-master.yaml' }} --config ../ocp/auth/kubeconfig"
    when: storage_type == "R"

  - name: Configure rook-ceph operator file
    vars:
      replica_number: "{{ '3' if is_one_node == 'N' else '1' }}"
    template:
      src: "rook-operator.j2"
      dest: "../scripts/rook-operator.yaml"
    when: storage_type == "R" and is_one_node == 'Y'

  - name: Configure rook-ceph filesystem file
    vars:
      replica_number: "{{ '3' if is_one_node == 'N' else '1' }}"
    template:
      src: "rook-filesystem.j2"
      dest: "../scripts/rook-filesystem.yaml"
    when: storage_type == "R" and is_one_node == 'Y'

  - name: Configure rook-ceph cluster file
    vars:
      multiple_per_node: "{{ 'false' if is_one_node == 'N' else 'true' }}"
    template:
      src: "{{ 'rook-cluster.j2' if is_one_node == 'Y' else 'rook-cluster-master.j2' }}"
      dest: "../scripts/rook-cluster.yaml"
    when: storage_type == "R"

  - name: Configure rook-ceph-rbd-sc file
    vars:
      replica_size: "{{ 2 if is_one_node == 'N' else 1 }}"
      requires_replica: "{{ 'true' if is_one_node == 'N' else 'false' }}"
    template:
      src: "rook-storage_class_rbd.j2"
      dest: "../scripts/rook-storage_class_rbd.yaml"
    when: storage_type == "R"

  - name: Add CEPH image variables for air-gapp installation
    lineinfile:
      path: ../scripts/rook-operator.yaml
      insertbefore: "# To disable RBAC, uncomment the following:"
      line: "{{ item }}"
    loop:
      - '        - name: ROOK_CSI_PROVISIONER_IMAGE'
      - '          value: "registry.{{ domain }}:5000/rook/csi-provisioner:v1.3.0"'
      - '        - name: ROOK_CSI_REGISTRAR_IMAGE'
      - '          value: "registry.{{ domain }}:5000/rook/csi-node-driver-registrar:v1.1.0"'
      - '        - name: ROOK_CSI_ATTACHER_IMAGE'
      - '          value: "registry.{{ domain }}:5000/rook/csi-attacher:v1.2.0"'
      - '        - name: ROOK_CSI_CEPH_IMAGE'
      - '          value: "registry.{{ domain }}:5000/rook/cephcsi:v1.2.1"'
      - '        - name: ROOK_CSI_SNAPSHOTTER_IMAGE'
      - '          value: "registry.{{ domain }}:5000/rook/csi-snapshotter:v1.2.0"'
    when: internet_type == 'A' and storage_type == "R"

  - name: Configure rook operator
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/{{ 'rook-operator.yaml' if is_one_node == 'Y' else 'rook-operator-master.yaml' }} --config ../ocp/auth/kubeconfig"
      - "oc apply -f ../scripts/{{ 'rook-filesystem.yaml' if is_one_node == 'Y' else 'rook-filesystem-master.yaml' }} --config ../ocp/auth/kubeconfig"
    when: storage_type == "R"

  - name: Wait for Rook operator
    shell:
      cmd: "oc get pods -n rook-ceph --config=../ocp/auth/kubeconfig --selector app=rook-ceph-operator --no-headers -o custom-columns=STATUS:.status.phase|grep -v Running|wc -l"
    register: rook_operator_status
    until: "rook_operator_status.stdout == \"0\""
    retries: 20
    delay: 10
    when: storage_type == "R"

  - name: Deploy rook-ceph cluster
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc apply -f ../scripts/rook-cluster.yaml --config ../ocp/auth/kubeconfig" }
    when: storage_type == "R"

  - name: Wait for correct Rook Ceph cluster deployment
    shell:
      cmd: "oc get cephcluster -n rook-ceph --config ../ocp/auth/kubeconfig --no-headers -o custom-columns=HEALTH:.status.ceph.health"
    register: ceph_installation_status
    until: "ceph_installation_status.stdout == \"HEALTH_OK\" or ceph_installation_status.stdout == \"HEALTH_WARN\""
    retries: 60
    delay: 10
    when: storage_type == "R"

  - name: Configure storage classes
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc apply -f ../scripts/rook-storage_class_rbd.yaml --config ../ocp/auth/kubeconfig" }
      - { cmd: "oc apply -f ../scripts/rook-storage_class_cephfs.yaml --config ../ocp/auth/kubeconfig" }
      - { cmd: "oc patch storageclass rook-ceph-block --config ../ocp/auth/kubeconfig -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }
    when: storage_type == "R"

  - name: Configure registry PVC file
    vars:
      storage_class_rw_many: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' }}"
    template:
      src: "ocp_registry_pvc.j2"
      dest: "../scripts/ocp_registry_pvc.yaml"

  - name: Create PVC for registry storage
    shell:
      cmd: oc apply -f ../scripts/ocp_registry_pvc.yaml --config ../ocp/auth/kubeconfig

  - name: Wait for PVC
    shell:
      cmd: "oc get pvc -n openshift-image-registry --config=../ocp/auth/kubeconfig registry --no-headers -o custom-columns=STATUS:.status.phase"
    register: image_pvc_status
    until: "image_pvc_status.stdout == \"Bound\""
    retries: 30
    delay: 10

  - name: Configure OCP registry with PVC
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --config ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\":{\"storage\":{\"pvc\":{\"claim\": \"registry\"}}}}'" }
      - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --config ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\": {\"managementState\": \"Managed\"}}'" }
    when: true

  - pause:
      seconds: 30

  - name: Wait for Image registry successful reconfiguration
    shell:
      cmd: "oc get clusteroperators image-registry --config ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
    register: image_registry_status
    until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
    retries: 20
    delay: 10
    when: true

  - name: Set public route for image registry
    shell:
      cmd: oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge --config ../ocp/auth/kubeconfig

  - pause:
      seconds: 30

  - name: Wait for API server successful reconfiguration
    shell:
      cmd: "oc get clusteroperators kube-apiserver --config ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
    register: image_registry_status
    until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
    retries: 60
    delay: 15
    when: true

  - debug:
        msg:
          - OpenShift 4.6 cluster installation finished
          - Add to hosts on your web browser workstation this line
          - "{{ node_ip[0] if is_one_node == 'Y' else bas_ip }} console-openshift-console.apps.{{ domain }} oauth-openshift.apps.{{ domain }} icp-console.apps.{{ domain }} insights.apps.{{ domain }}"
          - "Login to OCP console as {{ ocadmin }} user - https://console-openshift-console.apps.{{ domain }}"  

  - debug:
        msg:
          - To install ICS execute playbook 'ansible-playbook playbooks/04-install-ics.yaml'
    when: is_ics == 'Y'
