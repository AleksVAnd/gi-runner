- hosts: bastion
  vars:
    is_master_only:  "{{ lookup('env','GI_MASTER_ONLY') }}"
    is_ocs_tainted:  "{{ lookup('env','GI_OCS_TAINTED') }}"
    boot_name: "{{ lookup('env','GI_BOOTSTRAP_NAME') }}"
    is_ics: "{{ lookup('env','GI_ICS') }}"
    ocp_release:  "{{ lookup('env','GI_OCP_RELEASE') }}"
    ocp_major_release: "{{ ocp_release.split('.')[:-1]|join('.') }}"

  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
      - { name: "GI_OCS_TAINTED", value: "{{ is_ocs_tainted }}" }
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_BOOTSTRAP_NAME", value: "{{ boot_name }}" }
      - { name: "GI_STORAGE_DEVICE", value: "{{ storage_device }}" }
      - { name: "GI_STORAGE_DEVICE_SIZE", value: "{{ storage_device_size }}" }
      - { name: "GI_ICS", value: "{{ is_ics }}" }
  - name: Set masters array
    set_fact:
      master_ip: "{{ lookup('env', 'GI_MASTER_IP').split(',') }}"
      master_mac: "{{ lookup('env', 'GI_MASTER_MAC_ADDRESS').split(',') }}"
      master_name: "{{ lookup('env', 'GI_MASTER_NAME').split(',') }}"

  - name: Check master configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_MASTER_IP", value: "{{ master_ip }}" }
      - { name: "GI_MASTER_MAC_ADDRESS", value: "{{ master_mac }}" }
      - { name: "GI_MASTER_NAME", value: "{{ master_name }}" }

  - name: Set OCS array
    set_fact:
      ocs_ip: "{{ lookup('env', 'GI_OCS_IP').split(',') }}"
      ocs_mac: "{{ lookup('env', 'GI_OCS_MAC_ADDRESS').split(',') }}"
      ocs_name: "{{ lookup('env', 'GI_OCS_NAME').split(',') }}"
    when: is_ocs_tainted == 'Y'

  - name: Check OCS configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: is_ocs_tainted == 'Y' and item.value == ""
    loop:
      - { name: "GI_OCS_IP", value: "{{ ocs_ip }}" }
      - { name: "GI_OCS_MAC_ADDRESS", value: "{{ ocs_mac }}" }
      - { name: "GI_OCS_NAME", value: "{{ ocs_name }}" }

  - name: Check OCS configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: is_ocs_tainted == 'Y' and item.value == ""
    loop:
      - { name: "GI_OCS_IP", value: "{{ ocs_ip }}" }
      - { name: "GI_OCS_MAC_ADDRESS", value: "{{ ocs_mac }}" }
      - { name: "GI_OCS_NAME", value: "{{ ocs_name }}" }

  - name: Set workers arrays
    set_fact:
      worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
      worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
      worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
    when: is_master_only == 'N'

  - name: Check workers configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: is_master_only == 'N' and item.value == ""
    loop:
      - { name: "GI_WORKER_IP", value: "{{ worker_ip }}" }
      - { name: "GI_WORKER_MAC_ADDRESS", value: "{{ worker_mac }}" }
      - { name: "GI_WORKER_NAME", value: "{{ worker_name }}" }

  - name: Set ingress cert variables
    set_fact:
      ocp_ca: "{{ lookup('env', 'GI_OCP_IN_CA') }}"
      ocp_cert: "{{ lookup('env', 'GI_OCP_IN_CERT') }}"
      ocp_key: "{{ lookup('env', 'GI_OCP_IN_KEY') }}"
    when: ocp_ext_ingress == 'Y'

  - name: Check ingress cert variables
    fail: msg="Variable {{ item.name }} is not set"
    when: ocp_ext_ingress == 'Y' and item.value == ""
    loop:
      - { name: "GI_OCP_IN_CA", value: "{{ ocp_ca }}" }
      - { name: "GI_OCP_IN_CERT", value: "{{ ocp_cert }}" }
      - { name: "GI_OCP_IN_KEY", value: "{{ ocp_key }}" }

  - name: Configure OCS nodes on workers
    shell:
      cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --kubeconfig ../ocp/auth/kubeconfig --overwrite=true"
    with_items: "{{ worker_name|list if worker_name|length == 2 else worker_name[:3]|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'N'

  - name: Configure OCS nodes for taint
    shell: |
      oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --kubeconfig ../ocp/auth/kubeconfig --overwrite=true
      oc label nodes {{ item }}.{{ domain }} node-role.kubernetes.io/infra='' --kubeconfig ../ocp/auth/kubeconfig --overwrite=true
    with_items: "{{ ocs_name|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'

  - name: Configure OCS nodes on masters
    shell:
      cmd: "oc label nodes {{ item }}.{{ domain }} cluster.ocs.openshift.io/openshift-storage='' --kubeconfig ../ocp/auth/kubeconfig --overwrite=true"
    with_items: "{{ master_name|list }}"
    when: storage_type == "O" and is_master_only == 'Y'

  - name: Create OCS namespaces
    shell:
      cmd: "oc create namespace {{ item }}"
    with_items:
      - openshift-local-storage
      - openshift-storage
    ignore_errors: yes
    when: storage_type == "O"

  - name: Configure local storage operator file
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"
    template:
      src: "local-storage-op.j2"
      dest: "../scripts/local-storage-op.yaml"
    when: storage_type == "O"

  - name: Configure local storage operator
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/local-storage-op.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for local storage operator
    shell:
      cmd: "oc get csv -n openshift-local-storage --kubeconfig=../ocp/auth/kubeconfig --no-headers -o custom-columns=STATUS:.status.phase"
    register: ls_operator_status
    until: "ls_operator_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Configure local storage deployment file with workers
    vars:
      nodes: "{{ worker_name|list if worker_name|length == 2 else worker_name[:3]|list }}"
    template:
      src: "local-storage-vol.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'N'

  - name: Configure local storage deployment file in taint
    vars:
      nodes: "{{ ocs_name|list }}"
    template:
      src: "local-storage-vol-tainted.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'

  - name: Configure local storage deployment file with masters only
    vars:
      nodes: "{{ master_name|list }}"
    template:
      src: "local-storage-vol.j2"
      dest: "../scripts/local-storage-vol.yaml"
    when: storage_type == "O" and is_master_only == 'Y'

  - name: Deploy local storage
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/local-storage-vol.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for local storage deployment
    shell:
      cmd: "oc get pv | grep localblock-sc | wc -l"
    register: ls_status
    until: "ls_status.stdout|int >= 3"
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Taint OCS nodes
    shell:
      cmd: "oc adm taint node {{ item }}.{{ domain }} node.ocs.openshift.io/storage=\"true\":NoSchedule"
    with_items: "{{ ocs_name|list }}"
    when: storage_type == "O" and is_master_only == 'N' and is_ocs_tainted == 'Y'
    ignore_errors: yes

  - name: Configure OCS operator file
    vars:
      operator_source: "{{ 'redhat-operators' if internet_type != 'A' else 'redhat-operator-index' }}"
      ocs_stable: "{{ '4.8' if ocp_major_release == '4.9' else ocp_major_release }}"
    template:
      src: "ocs-op.j2"
      dest: "../scripts/ocs-op.yaml"
    when: storage_type == "O"

  - name: Configure OCS operator
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/ocs-op.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for OCS operator
    shell:
      cmd: "oc get csv -n openshift-storage --kubeconfig=../ocp/auth/kubeconfig --no-headers -o custom-columns=STATUS:.status.phase"
    register: ocs_operator_status
    until: "ocs_operator_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10
    when: storage_type == "O"

  - name: Configure OCS cluster deployment file
    template:
      src: "ocs-cluster.j2"
      dest: "../scripts/ocs-cluster.yaml"
    when: storage_type == "O"

  - name: Deploy OCS cluster
    shell:
      cmd: "{{ item }}"
    loop:
      - "oc apply -f ../scripts/ocs-cluster.yaml --kubeconfig ../ocp/auth/kubeconfig"
    when: storage_type == "O"

  - name: Wait for OCS cluster deployment
    shell:
      cmd: "oc get pvc -n openshift-storage --no-headers | grep localblock-sc | grep Bound | wc -l"
    register: ocs_status
    until: "ocs_status.stdout|int >= 3"
    retries: 100
    delay: 15
    when: storage_type == "O"

  - name: Wait - OCS installation finalization
    pause:
      minutes: 5
    when: storage_type == "O"

  - name: Configure OCS default storage class
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc patch storageclass ocs-storagecluster-cephfs --kubeconfig ../ocp/auth/kubeconfig -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }
    when: storage_type == "O"

  - name: Wait for Rook operator
    shell:
      cmd: "oc get pods -n rook-ceph --kubeconfig=../ocp/auth/kubeconfig --selector app=rook-ceph-operator --no-headers -o custom-columns=STATUS:.status.phase|grep -v Running|wc -l"
    register: rook_operator_status
    until: "rook_operator_status.stdout == \"0\""
    retries: 30
    delay: 10
    when: storage_type == "R"

  - name: Deploy rook-ceph cluster
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc apply -f ../gi-temp/'rook-cluster.yaml' --kubeconfig ../ocp/auth/kubeconfig" }
    when: storage_type == "R"

  - name: Wait for correct Rook Ceph cluster deployment
    shell:
      cmd: "oc get cephcluster -n rook-ceph --kubeconfig ../ocp/auth/kubeconfig --no-headers -o custom-columns=HEALTH:.status.ceph.health"
    register: ceph_installation_status
    until: "ceph_installation_status.stdout == \"HEALTH_OK\" or ceph_installation_status.stdout == \"HEALTH_WARN\""
    retries: 60
    delay: 15
    when: storage_type == "R"

  - name: Configure storage classes
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc apply -f ../gi-temp/rook-storage_class_rbd.yaml --kubeconfig ../ocp/auth/kubeconfig" }
      - { cmd: "oc apply -f ../scripts/rook-storage_class_cephfs.yaml --kubeconfig ../ocp/auth/kubeconfig" }
      - { cmd: "oc patch storageclass rook-ceph-block --kubeconfig ../ocp/auth/kubeconfig -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'" }
    when: storage_type == "R"

  - name: Deploy rook toolbox
    shell:
      cmd: "oc apply -f ../gi-temp/rook-toolbox.yaml"

  - name: Configure registry PVC file
    vars:
      storage_class_rw_many: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' }}"
    template:
      src: "ocp_registry_pvc.j2"
      dest: "../scripts/ocp_registry_pvc.yaml"

  - name: Create PVC for registry storage
    shell:
      cmd: oc apply -f ../scripts/ocp_registry_pvc.yaml --kubeconfig ../ocp/auth/kubeconfig

  - name: Wait for PVC
    shell:
      cmd: "oc get pvc -n openshift-image-registry --kubeconfig=../ocp/auth/kubeconfig registry --no-headers -o custom-columns=STATUS:.status.phase"
    register: image_pvc_status
    until: "image_pvc_status.stdout == \"Bound\""
    retries: 30
    delay: 10

  - name: Configure OCP registry with PVC
    shell:
      cmd: "{{ item.cmd }}"
    with_items:
      - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --kubeconfig ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\":{\"storage\":{\"pvc\":{\"claim\": \"registry\"}}}}'" }
      - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --kubeconfig ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\": {\"managementState\": \"Managed\"}}'" }

  - pause:
      seconds: 30

  - name: Wait for Image registry successful reconfiguration
    shell:
      cmd: "oc get clusteroperators image-registry --kubeconfig ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
    register: image_registry_status
    until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
    retries: 20
    delay: 10

  - name: Set public route for image registry
    shell:
      cmd: oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge --kubeconfig ../ocp/auth/kubeconfig

  - pause:
      seconds: 30

  - name: Wait for API server successful reconfiguration
    shell:
      cmd: "oc get clusteroperators kube-apiserver --kubeconfig ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
    register: image_registry_status
    until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
    retries: 60
    delay: 30

