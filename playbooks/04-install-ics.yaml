- hosts: bastion
  vars:
    ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    ics_ext_ingress: "{{ lookup('env','GI_ICS_IN') }}"
  
  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_ICS_VERSION", value: "{{ ics_version_hint }}" }
      - { name: "GI_ICS_OPERANDS", value: "{{ ics_operands }}" }
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      - { name: "GI_ICS_IN", value: "{{ ics_ext_ingress }}" }

  - name: Set parameters for ICS with GI (part1)
    set_fact:
      gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
      gi_size:  "{{ lookup('env','GI_SIZE_GI') }}"
    when: install_gi == 'Y'

  - name: Check GI configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: install_gi == 'Y' and item.value == ""
    loop:
      - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
      - { name: "GI_SIZE_GI", value: "{{ gi_size }}" }

  - name: Set parameters for ICS with GI (part2)
    set_fact:
      ics_size_hint: "{{ 'S' if gi_size == 'values-dev' else 'S' if gi_size == 'values-poc-lite' else 'M' }}"
      gi_version: "{{ '3.0.0' if gi_version_index == '0' else '3.0.1' if gi_version_index == '1' else '3.0.2' if gi_version_index == '2' else '3.1.0' if gi_version_index == '3' else '3.1.2'}}"
    when: install_gi == 'Y'

  - name: Set parameters for ICS without GI
    set_fact:
      ics_size_hint: "{{ lookup('env','GI_ICS_SIZE') }}"
    when: install_gi == 'N'

  - name: Check GI configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: install_gi == 'N' and item.value == ""
    loop:
      - { name: "GI_ICS_SIZE", value: "{{ ics_size_hint }}" }

  - name: Set GI installation variables
    set_fact:
      gi_case_archive: "{{ 'ibm-guardium-insights-2.0.0.tgz' if gi_version_index == '0' else 'ibm-guardium-insights-2.0.1.tgz' if gi_version_index == '1' else 'ibm-guardium-insights-2.0.2.tgz' if gi_version_index == '2' else 'ibm-guardium-insights-2.1.0.tgz' if gi_version_index == '3' else 'ibm-guardium-insights-2.1.2.tgz'}}"
    when: internet_type == 'A' and install_gi == 'Y'

  - name: Set parameters for air-gapped installation
    set_fact:
      ics_registry: "{{ 'ics_registry-'+ics_version+'.tar' if install_gi == 'N' else 'gi_registry-'+gi_version+'.tar' }}"
      ics_manifest: "{{ 'gi_offline/*' if install_gi == 'Y' else 'ics_offline/*' }}"
      offline_archive: "{{ 'ics_images.tar' if install_gi == 'N' else 'gi_images.tar' }}"
      offline_inventory: "{{ '../gi-temp/ics_offline' if install_gi == 'N' else '../gi-temp/gi_offline' }}"
    when: internet_type == 'A'

      - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }

  - name: Set endpoint cert variables
    set_fact:
      ics_ca: "{{ lookup('env', 'GI_ICS_IN_CA') }}"
      ics_cert: "{{ lookup('env', 'GI_ICS_IN_CERT') }}"
      ics_key: "{{ lookup('env', 'GI_ICS_IN_KEY') }}"
    when: ics_ext_ingress == 'Y'

  - name: Check ICS endpoint cert variables
    fail: msg="Variable {{ item.name }} is not set"
    when: ics_ext_ingress == 'Y' and item.value == ""
    loop:
      - { name: "GI_ICS_IN_CA", value: "{{ ics_ca }}" }
      - { name: "GI_ICS_IN_CERT", value: "{{ ics_cert }}" }
      - { name: "GI_ICS_IN_KEY", value: "{{ ics_key }}" }

  - name: Switch ICS inventory to portable registry
    shell:
      cmd: "cloudctl case launch --case {{ offline_inventory }}/{{ ics_case }} --inventory {{ ics_case_inventory_setup }} --action configure-cluster-airgap --namespace {{ ics_operator_namespace }}  --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --inputDir {{ offline_inventory }}\""
    when: internet_type == 'A' and install_gi == 'N'

  - name: Switch GI inventory to portable registry
    shell:
      cmd: "cloudctl case launch --case {{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action configure-cluster-airgap --namespace {{ ics_operator_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --inputDir {{ offline_inventory }}\""
    when: internet_type == 'A' and install_gi == 'Y'

  - name: Wait for cluster reconfiguration
    pause:
      minutes: 8
    when: internet_type == 'A'

  - name: Check cluster nodes health after Content Source Policy change
    shell: ../scripts/check_cluster_health_operators.sh
    register: cluster_health_operators
    until: cluster_health_operators.stdout == "0"
    retries: 100
    delay: 30
    when: internet_type == 'A'

  - name: Wait for cluster operators after mirrored operator images setup (can take 20-40 minutes)
    shell:
      cmd: "oc get co --config=../ocp/auth/kubeconfig --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
    register: co_status
    until: "co_status.stdout == \"0\""
    retries: 150
    delay: 30
    when: internet_type == 'A'

  - name: Create ICS catalog file
    vars:
      ics_registry: "{{ 'docker.io/ibmcom' if ics_version_hint is in [ 0, 1, 2, 3, 4, 5, 6 ] else 'icr.io/cpopen' }}"
    template:
      src: ics_catalog.j2
      dest: "../gi-temp/ics_catalog.yaml"
    when: internet_type != 'A'

  - name: Publish ICS catalog
    shell:
      cmd: "oc apply -f ../gi-temp/ics_catalog.yaml"
    when: internet_type != 'A'

  - name: Publish ICS catalog in air-gap
    shell:
      cmd: "cloudctl case launch --case {{ offline_inventory }}/{{ ics_case }} --inventory {{ ics_case_inventory_setup }} --action install-catalog --namespace {{ ics_operator_namespace }}  --args \"--registry registry.{{ domain }}:5000\""
    when: internet_type == 'A'

  - name: Wait for ICS catalog
    shell:
      cmd: "oc get pods -n openshift-marketplace|grep opencloud-operators|grep 1/1|grep Running|wc -l"
    register: ics_catalog_status
    until: "ics_catalog_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Wait for ICS catalog source
    shell:
      cmd: "oc get catalogsource -n openshift-marketplace|grep opencloud-operators|wc -l"
    register: ics_catalog_source_status
    until: "ics_catalog_source_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Subscribe ICS operator
    shell:
      cmd: "oc apply -f ../scripts/ics_subscription.yaml"

  - name: Wait for ICS csv
    shell:
      cmd: "oc -n common-service get csv|grep ibm-common-service-operator|grep Succeeded|wc -l"
    register: ics_csv_status
    until: "ics_csv_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Wait for ICS crd's
    shell:
      cmd: "oc get crd | grep operandrequest|wc -l"
    register: ics_crd_status
    until: "ics_crd_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Set ICS deployment size
    shell:
      cmd: "oc patch commonservice common-service -n ibm-common-services --type=\"json\" -p='[{\"op\": \"replace\", \"path\": \"/spec/size\", \"value\": \"{{ ics_size }}\"}]'"

  - name: Wait for deployment size change
    shell:
      cmd: "oc get commonservice common-service -n ibm-common-services -o json|jq -r .status.phase"
    register: ics_commonservice_status
    until: "ics_commonservice_status.stdout == \"Succeeded\""
    retries: 30
    delay: 10

  - name: Generate operands file
    template:
      src: "ics_operands.j2"
      dest: "../gi-temp/ics_operands.yaml"

  - name: Deploy ICS
    shell:
      cmd: "oc apply -f ../gi-temp/ics_operands.yaml"

  - name: Wait for operands deployment initiation
    pause:
      minutes: 3

  - name: Wait for successful ICS deployment (takes 20-60 minutes)
    shell:
      cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
    register: ics_pods_status
    until: "ics_pods_status.stdout == \"0\""
    retries: 80
    delay: 20

  - name: Check pod's containers status
    shell:
      cmd: "oc get pods -n ibm-common-services|grep Running|awk '{print $2}'|awk -F'/' '$1!=$2'|wc -l"
    register: ics_containers_status
    until: "ics_containers_status.stdout == \"0\""
    retries: 80
    delay: 20

  - name: Login to ICS
    shell:
      cmd: "cloudctl login -a https://cp-console.apps.{{ domain }} -u admin -p `oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d` -n kube-system"

  - name: Set ICS admin password
    shell:
      cmd: "cloudctl pm update-secret ibm-common-services platform-auth-idp-credentials -f -d admin_password='{{ ics_admin_password }}'"

  - name: Wait for authentication changes
    pause:
      minutes: 3

  - name: Wait for successful password change
    shell:
      cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
    register: ics_pods_status
    until: "ics_pods_status.stdout == \"0\""
    retries: 80
    delay: 20

  - name: Switch off automatic endpoint certificate recreation
    shell:
      cmd: oc -n ibm-common-services patch managementingress default --type merge --patch '{"spec":{"ignoreRouteCert":true}}'
    when: ics_ext_ingress == 'Y'

  - name: Wait for endpoint configuration change
    shell:
      cmd: "oc logs `oc get pods -n ibm-common-services | grep ibm-management-ingress-operator|awk '{print $1}'` -n ibm-common-services|grep 'IgnoreRouteCert is true'|wc -l"
    register: ics_pod_status
    until: "ics_pods_status.stdout != \"1\""
    retries: 10
    delay: 20
    when: ics_ext_ingress == 'Y'

  - name: Change endpoint cert
    shell:
      cmd: "{{ item }}"
    with_items:
      - "oc -n ibm-common-services delete certificates.v1alpha1.certmanager.k8s.io route-cert"
      - "oc -n ibm-common-services delete secret route-tls-secret"
      - "oc -n ibm-common-services create secret generic route-tls-secret --from-file=ca.crt={{ ics_ca }}  --from-file=tls.crt={{ ics_cert }}  --from-file=tls.key={{ ics_key }}"
      - "oc -n ibm-common-services delete secret ibmcloud-cluster-ca-cert"
      - "oc -n ibm-common-services delete pod -l app=auth-idp"
    when: ics_ext_ingress == 'Y'

  - name: Wait for successful cert replacement
    shell:
      cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
    register: ics_pods_status
    until: "ics_pods_status.stdout == \"0\""
    retries: 50
    delay: 20
    when: ics_ext_ingress == 'Y'

  - name: Copy ICS operand config to ocp directory
    shell:
      cmd: cp ../gi-temp/ics_operands.yaml ../ocp

  - name: Copy ICS catalog config to ocp directory
    shell:
      cmd: cp ../gi-temp/ics_catalog.yaml ../ocp
    when: internet_type != 'A'

  - name: Cleanup temp directory
    shell:
      cmd: rm -rf ../gi-temp/*

  - debug:
      msg:
        - "IBM Common Services {{ ics_version }} installation finished"
        - Update the hosts file on your web browser workstation
        - "{{ bas_ip }} console-openshift-console.apps.{{ domain }} oauth-openshift.apps.{{ domain }} cp-console.apps.{{ domain }}"
        - "Login to ICS console as admin user - https://cp-console.apps.{{ domain }}"
