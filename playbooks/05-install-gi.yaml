- hosts: bastion
  vars:
    gi_deployment_size: "{{ lookup('env','GI_SIZE_GI') }}"
    gi_version_index: "{{ lookup('env','GI_VERSION') }}"
    stap_supp: "{{ lookup('env','GI_STAP_STREAMING') }}"
    gi_ds_size: "{{ lookup('env','GI_DATA_STORAGE_SIZE') }}"
    gi_meta_size: "{{ lookup('env','GI_METADATA_STORAGE_SIZE') }}"
    gi_logs_size: "{{ lookup('env','GI_ACTIVELOGS_STORAGE_SIZE') }}"
    gi_mongo_size: "{{ lookup('env','GI_MONGO_DATA_STORAGE_SIZE') }}"
    gi_mongo_meta_size:  "{{ lookup('env','GI_MONGO_METADATA_STORAGE_SIZE') }}"
    gi_kafka_size: "{{ lookup('env','GI_KAFKA_STORAGE_SIZE') }}"
    gi_zookeeper_size:  "{{ lookup('env','GI_ZOOKEEPER_STORAGE_SIZE') }}"
  
  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_SIZE_GI", value: "{{ gi_deployment_size }}" }
      - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
      - { name: "GI_STAP_STREAMING", value: "{{ stap_supp }}" }
      - { name: "GI_IN", value: "{{ gi_ext_ingress }}" }
      - { name: "GI_DATA_STORAGE_SIZE", value: "{{ gi_ds_size }}" }
      - { name: "GI_METADATA_STORAGE_SIZE", value: "{{ gi_meta_size }}" }
      - { name: "GI_ACTIVELOGS_STORAGE_SIZE", value: "{{ gi_logs_size }}" }
      - { name: "GI_MONGO_DATA_STORAGE_SIZE", value: "{{ gi_mongo_size }}" }
      - { name: "GI_MONGO_METADATA_STORAGE_SIZE", value: "{{ gi_mongo_meta_size }}" }
      - { name: "GI_KAFKA_STORAGE_SIZE", value: "{{ gi_kafka_size }}" }
      - { name: "GI_ZOOKEEPER_STORAGE_SIZE", value: "{{ gi_zookeeper_size }}" }


  - name: Set parameters for non air-gapped installation
    set_fact:
      ibm_secret:  "{{ lookup('env','GI_IBM_SECRET') }}"
    when: internet_type != 'A'

  - name: Check configuration parameters for non air-gapped installation
    fail: msg="Variable {{ item.name }} is not set"
    when: internet_type != 'A' and item.value == ""
    loop:
      - { name: "GI_IBM_SECRET", value: "{{ ibm_secret }}" }


  - name: Set GI installation variables
    set_fact:
      storage_class_fs: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' }}"
      storage_class_block: "{{ 'rook-ceph-block' if storage_type == 'R' else 'ocs-storagecluster-ceph-rbd' }}"

  - name: Link python3 to python
    file:
      src: /usr/bin/python3
      dest: /usr/bin/python
      state: link

  - name: Get ssh service node port
    shell:
      cmd: "oc get services -n {{ gi_namespace }} {{ gi_namespace }}-ssh-service -o json|jq .spec.ports[0].nodePort"
    register: ssh_node_port

  - name: Open ssh-service port on bastion
    firewalld:
      port: "{{ item.port }}/{{ item.type }}"
      permanent: yes
      immediate: yes
      state: enabled
    with_items:
      - { port: "{{ ssh_node_port.stdout }}", type: "tcp" }

  - name: Create HA Proxy config file with ssh-service
    template:
      src: haproxy_with_ssh.j2
      dest: /etc/haproxy/haproxy.cfg
    vars:
      masters: "{{ master_name|zip(master_ip)|list }}"
      nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
      ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
      workers: "{{ nodes|zip(ips)|list }}"
    when: is_master_only == 'N'

  - name: Create HA Proxy config file with ssh-service (no dedicated workers)
    template:
      src: haproxy_with_ssh_masters_only.j2
      dest: /etc/haproxy/haproxy.cfg
    vars:
      masters: "{{ master_name|zip(master_ip)|list }}"
    when: is_master_only == 'Y'

  - name: Restart HA Proxy
    service:
      name: haproxy
      state: restarted

  - debug:
      msg:
        - "GI version {{ gi_version }} installation finished"
        - Update the hosts file on your web browser workstation
        - "{{ bas_ip }} insights.apps.{{ domain }}"
        - "Login to GI console as admin/{{ ics_admin_password }} - https://insights.apps.{{ domain }}"
        - "SSH port {{ ssh_node_port.stdout }} integration with GDP routed and opened on bastion"
        - "You can deploy on bastion the OpenLDAP and use it to add functional identities to GI, script 'playbooks/50-set_configure_ldap.yaml.sh'"
