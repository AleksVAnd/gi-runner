- hosts: bastion
  vars:
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    bas_ip:  "{{ lookup('env','GI_BASTION_IP') }}"
    install_gi:  "{{ lookup('env','GI_INSTALL_GI') }}"
    gi_namespace:  "{{ lookup('env','GI_NAMESPACE_GI') }}"
    db2_nodes_array: "{{ lookup('env','GI_DB2_NODES').split(',') }}"
    gi_deployment_size: "{{ lookup('env','GI_SIZE_GI') }}"
    storage_type:  "{{ lookup('env','GI_STORAGE_TYPE') }}"
    gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
    is_ocs_tainted:  "{{ lookup('env','GI_OCS_TAINTED') }}"
    db2_enc_hint: "{{ lookup('env','GI_DB2_ENCRYPTED') }}"
    is_master_only:  "{{ lookup('env','GI_MASTER_ONLY') }}"
    stap_supp: "{{ lookup('env','GI_STAP_STREAMING') }}"
    gi_ext_ingress: "{{ lookup('env','GI_IN') }}"
    gi_ds_size:  "{{ lookup('env','GI_DATA_STORAGE_SIZE') }}"
    gi_meta_size:  "{{ lookup('env','GI_METADATA_STORAGE_SIZE') }}"
    gi_logs_size:  "{{ lookup('env','GI_ACTIVELOGS_STORAGE_SIZE') }}"
    gi_mongo_size:  "{{ lookup('env','GI_MONGO_DATA_STORAGE_SIZE') }}"
    gi_mongo_meta_size:  "{{ lookup('env','GI_MONGO_METADATA_STORAGE_SIZE') }}"
    gi_kafka_size:  "{{ lookup('env','GI_KAFKA_STORAGE_SIZE') }}"
    gi_zookeeper_size:  "{{ lookup('env','GI_ZOOKEEPER_STORAGE_SIZE') }}"
  
  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      - { name: "GI_INSTALL_GI", value: "{{ install_gi }}" }
      - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }
      - { name: "GI_DB2_NODES", value: "{{ db2_nodes_array }}" }
      - { name: "GI_SIZE_GI", value: "{{ gi_deployment_size }}" }
      - { name: "GI_STORAGE_TYPE", value: "{{ storage_type }}" }
      - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
      - { name: "GI_OCS_TAINTED", value: "{{ is_ocs_tainted }}" }
      - { name: "GI_DB2_ENCRYPTED", value: "{{ db2_enc_hint }}" }
      - { name: "GI_MASTER_ONLY", value: "{{ is_master_only }}" }
      - { name: "GI_STAP_STREAMING", value: "{{ stap_supp }}" }
      - { name: "GI_IN", value: "{{ gi_ext_ingress }}" }
      - { name: "GI_DATA_STORAGE_SIZE", value: "{{ gi_ds_size }}" }
      - { name: "GI_METADATA_STORAGE_SIZE", value: "{{ gi_meta_size }}" }
      - { name: "GI_ACTIVELOGS_STORAGE_SIZE", value: "{{ gi_logs_size }}" }
      - { name: "GI_MONGO_DATA_STORAGE_SIZE", value: "{{ gi_mongo_size }}" }
      - { name: "GI_MONGO_METADATA_STORAGE_SIZE", value: "{{ gi_mongo_meta_size }}" }
      - { name: "GI_KAFKA_STORAGE_SIZE", value: "{{ gi_kafka_size }}" }
      - { name: "GI_ZOOKEEPER_STORAGE_SIZE", value: "{{ gi_zookeeper_size }}" }

  - name: Set parameters for non air-gapped installation
    set_fact:
      ibm_secret:  "{{ lookup('env','GI_IBM_SECRET') }}"
    when: internet_type != 'A'

  - name: Check configuration parameters for non air-gapped installation
    fail: msg="Variable {{ item.name }} is not set"
    when: internet_type != 'A' and item.value == ""
    loop:
      - { name: "GI_IBM_SECRET", value: "{{ ibm_secret }}" }

  - name: Set parameters for air-gapped installation
    set_fact:
      repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
      repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
    when: internet_type == 'A'

  - name: Check configuration parameters for air-gapped installation
    fail: msg="Variable {{ item.name }} is not set"
    loop:
      - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
      - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }
    when: internet_type == 'A' and item.value == ""

  - name: Set masters array
    set_fact:
      master_ip: "{{ lookup('env', 'GI_MASTER_IP').split(',') }}"
      master_mac: "{{ lookup('env', 'GI_MASTER_MAC_ADDRESS').split(',') }}"
      master_name: "{{ lookup('env', 'GI_MASTER_NAME').split(',') }}"

  - name: Check master configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_MASTER_IP", value: "{{ master_ip }}" }
      - { name: "GI_MASTER_MAC_ADDRESS", value: "{{ master_mac }}" }
      - { name: "GI_MASTER_NAME", value: "{{ master_name }}" }

  - name: Set OCS array
    set_fact:
      ocs_ip: "{{ lookup('env', 'GI_OCS_IP').split(',') }}"
      ocs_mac: "{{ lookup('env', 'GI_OCS_MAC_ADDRESS').split(',') }}"
      ocs_name: "{{ lookup('env', 'GI_OCS_NAME').split(',') }}"
    when: is_ocs_tainted == 'Y'

  - name: Check OCS configuration
    fail: msg="Variable {{ item.name }} is not set"
    when: is_ocs_tainted == 'Y' and item.value == ""
    loop:
      - { name: "GI_OCS_IP", value: "{{ ocs_ip }}" }
      - { name: "GI_OCS_MAC_ADDRESS", value: "{{ ocs_mac }}" }
      - { name: "GI_OCS_NAME", value: "{{ ocs_name }}" }

  - name: Set workers arrays
    set_fact:
      worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
      worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
      worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
    when: is_master_only == 'N'

  - name: Set workers arrays
    set_fact:
      worker_ip: "{{ lookup('env', 'GI_WORKER_IP').split(',') }}"
      worker_mac: "{{ lookup('env', 'GI_WORKER_MAC_ADDRESS').split(',') }}"
      worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
    when: is_master_only == 'N'

  - name: Iterates all workers in one array
    vars:
      nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
      ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
    debug:
      msg: "{{ nodes|zip(ips)|list }}"

  - name: Set GI installation variables
    set_fact:
      archives_dir: "{{ lookup('env','GI_ARCHIVES_DIR') }}"
      gi_case_inventory_setup: "install"
      gi_case_archive: "{{ 'ibm-guardium-insights-2.0.0.tgz' if gi_version_index == '0' else 'ibm-guardium-insights-2.0.1.tgz' if gi_version_index == '1' else 'ibm-guardium-insights-2.0.2.tgz' if gi_version_index == '2' else 'ibm-guardium-insights-2.1.0.tgz' }}"
      offline_inventory: "gi_offline"
      storage_class_fs: "{{ 'rook-cephfs' if storage_type == 'R' else 'ocs-storagecluster-cephfs' }}"
      storage_class_block: "{{ 'rook-ceph-block' if storage_type == 'R' else 'ocs-storagecluster-ceph-rbd' }}"
      gi_version: "{{ '3.0.0' if gi_version_index == '0' else '3.0.1' if gi_version_index == '1' else '3.0.2' if gi_version_index == '2' else '3.1.0' }}"
      db2_enc: "{{ 'YES' if db2_enc_hint == 'Y' else 'NO' }}"
      db2_nodes_list: "{{ db2_nodes_array|product([domain])|map('join','.')|join(',') }}"
      gi_license: "{{ 'L-TESX-C86NC4' if gi_version_index|int > 2 else 'L-OOLE-C2ASKR' }}"

  - name: Set endpoint cert variables
    set_fact:
      gi_ca: "{{ lookup('env', 'GI_IN_CA') }}"
      gi_cert: "{{ lookup('env', 'GI_IN_CERT') }}"
      gi_key: "{{ lookup('env', 'GI_IN_KEY') }}"
    when: gi_ext_ingress == 'Y'

  - name: Check ICS endpoint cert variables
    fail: msg="Variable {{ item.name }} is not set"
    when: gi_ext_ingress == 'Y' and item.value == ""
    loop:
      - { name: "GI_IN_CA", value: "{{ gi_ca }}" }
      - { name: "GI_IN_CERT", value: "{{ gi_cert }}" }
      - { name: "GI_IN_KEY", value: "{{ gi_key }}" }

  - name: Extract offline operator archive
    shell:
      cmd: "tar -C ../gi-temp -xf {{ archives_dir }}/gi_registry-{{ gi_version }}.tar  gi_offline/*"
    when: internet_type == 'A'

  - name: Check presence of cloudctl tool
    stat:
      path: "/usr/local/bin/{{ item.file }}"
    register: cloudctl_tool
    with_items:
      - { file: "cloudctl" }
    ignore_errors: true

  - name: Stop if cloudct tool is not available
    fail:
      msg: "Install ICS before GI"
    with_items: "{{ cloudctl_tool.results }}"
    when: item.stat.exists == False 

  - name: Start portable registry
    shell:
      cmd: "{{ item }}"
    loop:
      - podman start bastion-registry
    when: internet_type == 'A'

  - name: Create GI operator namespace
    shell:
      cmd: "oc create namespace {{ gi_namespace }}||true"

  - name: Save portable repo credentials
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action configure-creds-airgap --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }}\""
    when: internet_type == 'A'

  - name: GI download case file
    shell:
      cmd: "cloudctl case save --case https://github.com/IBM/cloud-pak/raw/master/repo/case/{{ gi_case_archive }} --outputdir ../gi-temp/{{ offline_inventory }} --tolerance 1"
    when: internet_type != 'A'

  - name: Link python3 to python
    file:
      src: /usr/bin/python3
      dest: /usr/bin/python
      state: link

  - name: GI preinstall task
    vars:
      add_options1: "{{ ' -l true ' if gi_version_index|int > 2 else '' }}"
      add_options2: "{{ ' -c '+gi_ca+' -f '+gi_cert+' -k '+gi_key if gi_ext_ingress == 'Y' else '' }}"
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action pre-install --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -a admin -p {{ ics_admin_password}} -h {{ db2_nodes_list }}{{ add_options1 }}{{ add_options2 }}\""

  - name: Install GI catalog in air-gapped
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-catalog --namespace openshift-marketplace --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --inputDir ../gi-temp/{{ offline_inventory }}\""
    when: internet_type == 'A'

  - name: Install GI catalog online (3.0.0)
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-catalog --namespace openshift-marketplace --tolerance 1 --args \"--registry docker.io\""
    when: internet_type != 'A' and gi_version == '3.0.0'

  - name: Install GI catalog online (3.0.1+)
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-catalog --namespace openshift-marketplace --tolerance 1"
    when: internet_type != 'A' and gi_version != '3.0.0'

  - name: Wait for GI catalog (part1)
    shell:
      cmd: "oc get pods -n openshift-marketplace|grep ibm-db2uoperator-catalog|grep 1/1|grep Running|wc -l"
    register: db2_catalog_status
    until: "db2_catalog_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Wait for GI catalog (part2)
    shell:
      cmd: "oc get pods -n openshift-marketplace|grep ibm-cloud-databases-redis-operator-catalog|grep 1/1|grep Running|wc -l"
    register: redis_catalog_status
    until: "redis_catalog_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Install GI operators in air-gapped env
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-operator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --secret ibm-entitlement-key\""
    when: internet_type == 'A'

  - name: Install GI operators online
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-operator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry cp.icr.io --user cp --pass {{ ibm_secret }} --secret ibm-entitlement-key\""
    when: internet_type != 'A'

  - name: Wait for GI operators before 3.1
    shell:
      cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item.operator_pattern }}|grep 1/1|grep Running|wc -l"
    register: operator_status
    until: "operator_status.stdout == \"1\""
    retries: 30
    delay: 10
    with_items:
      - { operator_pattern: "db2u-operator-manager" }
      - { operator_pattern: "ibm-cloud-databases-redis-operator" }
      - { operator_pattern: "mongodb-kubernetes-operator" }
      - { operator_pattern: "guardiuminsights-controller-manager" }
    when: gi_version_index|int < 3

  - name: Wait for GI operators from 3.1
    shell:
      cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item.operator_pattern }}|grep 1/1|grep Running|wc -l"
    register: operator_status
    until: "operator_status.stdout == \"1\""
    retries: 30
    delay: 10
    with_items:
      - { operator_pattern: "ibm-cloud-databases-redis-operator" }
      - { operator_pattern: "mongodb-kubernetes-operator" }
      - { operator_pattern: "guardiuminsights-controller-manager" }
    when: gi_version_index|int > 2

  - name: Generate GI deployment file
    template:
      src: "gi.j2"
      dest: "../gi-temp/gi.yaml"

  - name: Deploy GI
    shell:
      cmd: "oc apply -f ../gi-temp/gi.yaml"

  - name: Wait for completion of db2-inst - OOMKilled BUG workaround
    shell: ../scripts/db2_oomkilled.sh

  - name: Wait for initiation of db2u deployment - /dev/tty BUG workaround (part1)
    shell:
      cmd: "oc get sts -n gi|grep db2-db2u|wc -l"
    register: db2u_initiated
    until: "db2u_initiated.stdout == \"1\""
    retries: 80
    delay: 20
    when: gi_version == '3.0.0'

  - name: Wait for initiation of db2u deployment - /dev/tty BUG workaround (part2)
    shell:
      cmd: "oc patch sts c-{{ gi_namespace }}-db2-db2u -p='{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"db2u\",\"tty\":false}]}}}}}'"
    when: gi_version == '3.0.0'

  - name: Wait for initiation of db2u deployment - /dev/tty BUG workaround (part3)
    shell:
      cmd: "oc get sts -n gi|grep db2-db2u|grep 1/1|wc -l"
    register: db2u_initiated
    until: "db2u_initiated.stdout == \"1\""
    retries: 80
    delay: 20
    when: gi_version == '3.0.0'

  - name: Wait for successful GI deployment (takes 20-60 minutes)
    shell:
      cmd: "oc get guardiuminsights -o json|jq .items[0].status.versions.reconciled|tr -d '\"'"
    register: gi_deployment_status
    until: "gi_deployment_status.stdout == \"{{ gi_version }}\""
    retries: 100
    delay: 60

  - name: Get ssh service node port
    shell:
      cmd: "oc get services -n {{ gi_namespace }} {{ gi_namespace }}-ssh-service -o json|jq .spec.ports[0].nodePort"
    register: ssh_node_port

  - name: Open ssh-service port on bastion
    firewalld:
      port: "{{ item.port }}/{{ item.type }}"
      permanent: yes
      immediate: yes
      state: enabled
    with_items:
      - { port: "{{ ssh_node_port.stdout }}", type: "tcp" }

  - name: Create HA Proxy config file with ssh-service
    template:
      src: haproxy_with_ssh.j2
      dest: /etc/haproxy/haproxy.cfg
    vars:
      masters: "{{ master_name|zip(master_ip)|list }}"
      nodes: "{{ worker_name|default([])+ocs_name|default([]) }}"
      ips: "{{ worker_ip|default([])+ocs_ip|default([]) }}"
      workers: "{{ nodes|zip(ips)|list }}"
    when: is_master_only == 'N'

  - name: Create HA Proxy config file with ssh-service (no dedicated workers)
    template:
      src: haproxy_with_ssh_masters_only.j2
      dest: /etc/haproxy/haproxy.cfg
    vars:
      masters: "{{ master_name|zip(master_ip)|list }}"
    when: is_master_only == 'Y'

  - name: Restart HA Proxy
    service:
      name: haproxy
      state: restarted

  - debug:
      msg:
        - "GI version {{ gi_version }} installation finished"
        - Update the hosts file on your web browser workstation
        - "{{ bas_ip }} insights.apps.{{ domain }}"
        - "Login to GI console as admin/{{ ics_admin_password }} - https://insights.apps.{{ domain }}"
        - "SSH port {{ ssh_node_port.stdout }} integration with GDP routed and opened on bastion"
        - "You can deploy on bastion the OpenLDAP and use it to add functional identities to GI, script 'playbooks/50-set_configure_ldap.yaml.sh'"
