- hosts: bastion
  vars:
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    is_one_node: "{{ lookup('env','GI_ONENODE') }}"
    ics_size_hint: "{{ lookup('env','GI_ICS_SIZE') }}"
    ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    bas_ip:  "{{ lookup('env','GI_BASTION_IP') }}"
    install_gi:  "{{ lookup('env','GI_INSTALL_GI') }}"
    gi_version:  "{{ lookup('env','GI_VERSION') }}"
    gi_namespace:  "{{ lookup('env','GI_NAMESPACE_GI') }}"
    ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    db2_nodes: "{{ lookup('env','GI_DB2_NODES') }}"
  
  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_ONENODE", value: "{{ is_one_node }}" }
      - { name: "GI_BASTION_IP", value: "{{ bas_ip }}" }
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      - { name: "GI_INSTALL_GI", value: "{{ install_gi }}" }
      - { name: "GI_VERSION", value: "{{ gi_version }}" }
      - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      - { name: "GI_DB2_NODES", value: "{{ db2_nodes }}" }

  - name: Set parameters for air-gapped installation
    set_fact:
      repo_user:  "{{ lookup('env','GI_REPO_USER') }}"
      repo_user_password:  "{{ lookup('env','GI_REPO_USER_PWD') }}"
    when: internet_type == 'A'

  - name: Check configuration parameters for air-gapped installation
    fail: msg="Variable {{ item.name }} is not set"
    when: internet_type == 'A' and item.value == ""
    loop:
      - { name: "GI_REPO_USER", value: "{{ repo_user }}" }
      - { name: "GI_REPO_USER_PWD", value: "{{ repo_user_password }}" }

  - name: Set masters array
    set_fact:
      node_ip: "{{ lookup('env', 'GI_NODE_IP').split(',') }}"
      node_mac: "{{ lookup('env', 'GI_NODE_MAC_ADDRESS').split(',') }}"
      node_name: "{{ lookup('env', 'GI_NODE_NAME').split(',') }}"

  - name: Set GI installation variables
    set_fact:
      gi_case_inventory_setup: "install"
      gi_case_archive: "ibm-guardium-insights-2.0.0.tgz"
      offline_inventory: "gi_offline"
      ics_size: "{{ 'small' if ics_size_hint == 'S' else 'medium' if ics_size_hint == 'M' else 'large' }}"

  - debug:
      var: ics_case

  - name: Check presence of cloudctl tool
    stat:
      path: "/usr/local/bin/{{ item.file }}"
    register: cloudctl_tool
    with_items:
      - { file: "cloudctl" }
    ignore_errors: true

  - name: Stop if cloudct tool is not available
    fail:
      msg: "Install ICS before GI"
    with_items: "{{ cloudctl_tool.results }}"
    when: item.stat.exists == False 

  - name: Start portable registry
    shell:
      cmd: "{{ item }}"
    loop:
      - podman start bastion-registry
    when: internet_type == 'A'

  - name: Create GI operator namespace
    shell:
      cmd: "oc create namespace {{ gi_namespace }}"
    ignore_errors: yes

  - name: Save portable repo credentials
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action configure-creds-airgap --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }}\""
    when: internet_type == 'A'

  - name: Switch GI inventory to portable registry
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action configure-cluster-airgap --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --inputDir ../gi-temp/{{ offline_inventory }}\""
    when: internet_type == 'A'

  - name: Wait for cluster reconfiguration
    pause:
      minutes: 3
    when: internet_type == 'A' and is_one_node == 'N'

  - name: Wait for cluster operators after mirrored operator images setup (can take 20-40 minutes)
    shell:
      cmd: "oc get co --config=../ocp/auth/kubeconfig --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
    register: co_status
    until: "co_status.stdout == \"0\""
    retries: 150
    delay: 20
    when: internet_type == 'A' and is_one_node == 'N'

  - name: GI preinstall task
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action pre-install --namespace {{ gi_namespace }} --tolerance 1 --args \"-n {{ gi_namespace }} -a admin -p {{ ics_admin_password}} -h {{ db2_nodes }}.{{ domain }} -t false\""
    when: internet_type == 'A'

  - name: Install GI catalog
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-catalog --namespace openshift-marketplace --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --inputDir ../gi-temp/{{ offline_inventory }}\""
    when: internet_type == 'A'

  - name: Wait for GI catalog (part1)
    shell:
      cmd: "oc get pods -n openshift-marketplace|grep ibm-db2uoperator-catalog|grep 1/1|grep Running|wc -l"
    register: db2_catalog_status
    until: "db2_catalog_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Wait for GI catalog (part2)
    shell:
      cmd: "oc get pods -n openshift-marketplace|grep ibm-cloud-databases-redis-operator-catalog|grep 1/1|grep Running|wc -l"
    register: redis_catalog_status
    until: "redis_catalog_status.stdout == \"1\""
    retries: 30
    delay: 10

  - name: Install GI operators
    shell:
      cmd: "cloudctl case launch --case ../gi-temp/{{ offline_inventory }}/{{ gi_case_archive }} --inventory {{ gi_case_inventory_setup }} --action install-operator --namespace {{ gi_namespace }} --tolerance 1 --args \"--registry registry.{{ domain }}:5000 --user {{ repo_user }} --pass {{ repo_user_password }} --secret ibm-entitlement-key\""
    when: internet_type == 'A'

  - name: Wait for GI operators
    shell:
      cmd: "oc get pods -n {{ gi_namespace }}|grep {{ item.operator_pattern }}|grep 1/1|grep Running|wc -l"
    register: operator_status
    until: "operator_status.stdout == \"1\""
    retries: 30
    delay: 10
    with_items:
      - { operator_pattern: "db2u-operator-manager" }
      - { operator_pattern: "ibm-cloud-databases-redis-operator" }
      - { operator_pattern: "mongodb-kubernetes-operator" }
      - { operator_pattern: "mongodb-kubernetes-operator" }

  - meta: end_play

  - name: Generate operands file
    template:
      src: "ics_operands.j2"
      dest: "../gi-temp/ics_operands.yaml"

  - name: Deploy ICS
    shell:
      cmd: "oc apply -f ../gi-temp/ics_operands.yaml"

  - name: Wait for operands deployment initiation
    pause:
      minutes: 3

  - name: Wait for successful ICS deployment (takes 20-60 minutes)
    shell:
      cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
    register: ics_pods_status
    until: "ics_pods_status.stdout == \"0\""
    retries: 80
    delay: 20

  - name: Check pod's containers status
    shell:
      cmd: "oc get pods -n ibm-common-services|grep Running|awk '{print $2}'|awk -F'/' '$1!=$2'|wc -l"
    register: ics_containers_status
    until: "ics_containers_status.stdout == \"0\""
    retries: 80
    delay: 20

  - name: Login to ICS
    shell:
      cmd: "cloudctl login -a https://cp-console.apps.{{ domain }} -u admin -p `oc -n ibm-common-services get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d` -n kube-system"

  - name: Set ICS admin password
    shell:
      cmd: "cloudctl pm update-secret ibm-common-services platform-auth-idp-credentials -f -d admin_password='{{ ics_admin_password }}'"

  - name: Wait for authentication changes
    pause:
      minutes: 3

  - name: Wait for successful password change
    shell:
      cmd: "oc get pods --no-headers -n ibm-common-services|grep -v Completed|grep -v Running|wc -l"
    register: ics_pods_status
    until: "ics_pods_status.stdout == \"0\""
    retries: 80
    delay: 20

  - debug:
      msg:
        - "IBM Common Services {{ ics_version }} installation finished"
        - Update the hosts file on your web browser workstation
        - "{{ node_ip[0] if is_one_node == 'Y' else bas_ip }} console-openshift-console.apps.{{ domain }} oauth-openshift.apps.{{ domain }} cp-console.apps.{{ domain }}"
        - "Login to ICS console as admin user - https://cp-console.apps.{{ domain }}"
