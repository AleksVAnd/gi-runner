- hosts: bastion
  vars:
    ics_version_hint: "{{ lookup('env','GI_ICS_VERSION') }}"
    ics_versions: [ "3.7.4","3.8.1","3.9.1","3.10.0","3.11.0","3.12.1","3.13.0", "3.14.2"]
    ics_cases: [ "ibm-cp-common-services-1.3.4.tgz","ibm-cp-common-services-1.4.1.tgz","ibm-cp-common-services-1.5.1.tgz","ibm-cp-common-services-1.6.0.tgz","ibm-cp-common-services-1.7.0.tgz","ibm-cp-common-services-1.8.1.tgz","ibm-cp-common-services-1.9.0.tgz", "ibm-cp-common-services-1.10.2.tgz" ]
    ics_operands: "{{ lookup('env','GI_ICS_OPERANDS').split(',') }}"
    ics_admin_password: "{{ lookup('env','GI_ICSADMIN_PWD') }}"
    ocadmin:  "{{ lookup('env','GI_OCADMIN') }}"
    ocadmin_password:  "{{ lookup('env','GI_OCADMIN_PWD') }}"
    domain:  "{{ lookup('env','GI_DOMAIN') }}"

  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_ICS_VERSION", value: "{{ ics_version_hint }}" }
      - { name: "GI_ICS_OPERANDS", value: "{{ ics_operands }}" }
      - { name: "GI_ICSADMIN_PWD", value: "{{ ics_admin_password }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }

  - name: Set ICS uninstallation variables
    set_fact:
      use_new_procedure: "{{ True if ics_version_hint|int > 5 else False }}" 

  - name: Check operandrequest existence
    shell:
      cmd: "oc get operandrequests -n ibm-common-services -o name|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Remove operandrequest
    shell:
      cmd: "oc delete $(oc get operandrequests -n ibm-common-services -o name) -n ibm-common-services --ignore-not-found --timeout=60s"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check crd's existence
    shell:
      cmd: "oc get crd -oname|grep -E ibm.com|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Remove CRD's
    shell:
      cmd: "oc delete $(oc get crd -oname| grep -E ibm.com)"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Wait for CRD's removal
    pause:
      minutes: 3
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check crd's existence
    shell:
      cmd: "oc get crd -oname|grep -E ibm.com|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Patch remaining CRD's
    shell:
      cmd: "oc patch $(oc get crd -oname| grep -E ibm.com) --type json -p '[{ \"op\": \"remove\", \"path\": \"/metadata/finalizers\"}]'"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Wait for CRD's removal
    pause:
      minutes: 1
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check crd's existence
    shell:
      cmd: "oc get crd -oname|grep -E ibm.com|wc -l"
    register: are_objects
    when: use_new_procedure
    failed_when: are_objects.stdout|int != 0

  - name: Check CVS's and SUB's existence
    shell:
      cmd: "oc -n ibm-common-services get csv,sub -o name|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Remove CVS's and SUB's
    shell:
      cmd: "oc delete $(oc -n ibm-common-services get csv,sub -o name) -n ibm-common-services"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check ICS catalog existence
    shell:
      cmd: "oc -n openshift-marketplace get CatalogSource -o name|grep opencloud-operators|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete ICS catalog
    shell:
      cmd: 'oc delete -f ../ocp/ics_catalog.yaml'
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check common-service namespace existense
    shell:
      cmd: "oc get ns common-service -oname|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete common-service project
    shell:
      cmd: oc delete project common-service
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check rolebindings existense
    shell:
      cmd: "oc -n ibm-common-services get rolebindings --no-headers|grep -v '^system:' | awk '{print $1}'|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete rolebindings
    shell:
      cmd: "oc delete rolebinding $(oc -n ibm-common-services get rolebindings --no-headers|grep -v '^system:' | awk '{print $1}') -n ibm-common-services"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Check operator service existense
    shell:
      cmd: "oc get operatorgroup -n ibm-common-services -oname|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete operator group
    shell:
      cmd: "oc delete $(oc get operatorgroup -n ibm-common-services -oname) -n ibm-common-services"
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Delete remaining RBAC objects
    shell:
      cmd: "{{ item }}"
    with_items:
      - "oc delete ClusterRole ibm-common-service-webhook --ignore-not-found"
      - "oc delete ClusterRoleBinding ibm-common-service-webhook --ignore-not-found"
      - "oc delete RoleBinding ibmcloud-cluster-info -n kube-public --ignore-not-found"
      - "oc delete Role ibmcloud-cluster-info -n kube-public --ignore-not-found"
      - "oc delete RoleBinding ibmcloud-cluster-ca-cert -n kube-public --ignore-not-found"
      - "oc delete Role ibmcloud-cluster-ca-cert -n kube-public --ignore-not-found"
    when: use_new_procedure

  - name: Check ibm-common-service namespace existense
    shell:
      cmd: "oc get ns ibm-common-services -oname|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete ibm-common-services project
    shell:
      cmd: oc delete project ibm-common-services
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Wait for namespace removal
    pause:
      minutes: 3
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Delete remaining objects
    shell:
      cmd: "{{ item }}"
    with_items:
      - 'oc -n kube-public delete cm ibmcloud-cluster-info --ignore-not-found'
      - 'oc -n kube-public delete cm ibm-common-services-status --ignore-not-found --timeout=10s'
      - 'oc -n kube-public delete cm common-service-maps --ignore-not-found --timeout=10s'
      - 'oc -n kube-system delete secret icp-metering-api-secret --ignore-not-found'
      - 'oc -n kube-public delete configmap ibmcloud-cluster-info --ignore-not-found'
      - 'oc -n kube-public delete secret ibmcloud-cluster-ca-cert --ignore-not-found'
      - 'oc delete ValidatingWebhookConfiguration cert-manager-webhook ibm-cs-ns-mapping-webhook-configuration --ignore-not-found'
      - 'oc delete MutatingWebhookConfiguration cert-manager-webhook ibm-common-service-webhook-configuration ibm-operandrequest-webhook-configuration namespace-admission-config --ignore-not-found'
      - 'oc delete namespace services'
      - 'oc delete nss --all'
    when: use_new_procedure

  - name: Get ICS operator name
    shell:
      cmd: oc get  ClusterServiceVersion -n ibm-common-services -o name|grep ibm-common-service-operator||echo "none"
    register: ics_operator
    when: not use_new_procedure

  - name: Delete ICS operator
    shell:
      cmd: "oc delete {{ ics_operator.stdout }} -n ibm-common-services"
    when: not use_new_procedure and ics_operator.stdout != 'none'

  - name: Delete common-service project
    shell:
      cmd: oc delete project common-service||true
    when: not use_new_procedure

  - name: Delete operand common-service
    shell:
      cmd: 'oc delete operandrequest.operator.ibm.com/common-service -n ibm-common-services||true'
    when: not use_new_procedure

  - name: Wait for operands removal
    pause:
      minutes: 5
    when: not use_new_procedure

  - name: Get OCP login token
    shell:
      cmd: "python3 ../scripts/get_ocp_token.py {{ ocadmin }} {{ ocadmin_password }} {{ domain }}"
    register: ocp_token
    when: not use_new_procedure

  - name: Login to OCP after ICS API removal
    shell:
      cmd: "oc login --token={{ ocp_token.stdout }} --server=https://api.{{ domain }}:6443"
    when: not use_new_procedure

  - name: Check that operands are removed 
    shell:
      cmd: 'oc get OperandRequest -n ibm-common-services -o name|wc -l'
    register: operands_number
    until: "operands_number.stdout == \"0\""
    retries: 30
    delay: 30
    when: not use_new_procedure

  - name: Delete operand configs
    shell:
      cmd: 'for config in `oc get OperandConfig -n ibm-common-services -o name`; do oc delete $config -n ibm-common-services;done'
    when: not use_new_procedure

  - name: Delete operand registries
    shell:
      cmd: 'for registry in `oc get OperandRegistry -n ibm-common-services -o name`; do oc delete $registry -n ibm-common-services;done'
    when: not use_new_procedure
   
  - name: Delete operand namespacescopes
    shell:
      cmd: 'for nscope in `oc get NamespaceScope -n ibm-common-services -o name`; do oc delete $nscope -n ibm-common-services;done'
    when: not use_new_procedure

  - name: Delete remaining ICS operators
    shell:
      cmd: 'for operator in `oc get  ClusterServiceVersion -n ibm-common-services -o name`;do oc delete $operator -n ibm-common-services;done'
    when: not use_new_procedure

  - name: Delete ibm-common-services project
    shell:
      cmd: oc delete project ibm-common-services
    when: not use_new_procedure

  - name: Delete remaining objects
    shell:
      cmd: "{{ item }}"
    with_items:
      - 'oc -n kube-system delete secret icp-metering-api-secret --ignore-not-found'
      - 'oc -n kube-public delete configmap ibmcloud-cluster-info --ignore-not-found'
      - 'oc -n kube-public delete secret ibmcloud-cluster-ca-cert --ignore-not-found'
      - 'oc delete ValidatingWebhookConfiguration cert-manager-webhook ibm-cs-ns-mapping-webhook-configuration --ignore-not-found'
      - 'oc delete MutatingWebhookConfiguration cert-manager-webhook ibm-common-service-webhook-configuration ibm-operandrequest-webhook-configuration namespace-admission-config --ignore-not-found'
      - 'oc delete namespace services --ignore-not-found'
    when: not use_new_procedure

  - name: Check services namespace existense
    shell:
      cmd: "oc get ns services -oname|wc -l"
    register: are_objects
    when: use_new_procedure

  - name: Delete services project
    shell:
      cmd: oc delete project services
    when: use_new_procedure and are_objects.stdout|int > 0

  - name: Delete ICS crd's
    shell:
      cmd: 'for crd in `oc get crd -o name| grep ibm.com`;do oc delete $crd;done'
    when: not use_new_procedure

  - name: Delete ICS catalog
    shell:
      cmd: 'oc delete -f ../ocp/ics_catalog.yaml'
    when: not use_new_procedure

  - name: Delete ICS installation files
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - '../ocp/ics_operands.yaml'
      - '../ocp/ics_catalog.yaml'

  - debug:
        msg:
          - "ICS uninstalled with success."
