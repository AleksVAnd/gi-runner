- hosts: bastion
  vars:
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
    gi_namespace:  "{{ lookup('env','GI_NAMESPACE_GI') }}"

  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
      - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }

  - name: Set GI installation variables
    set_fact:
      gi_case_archive: "{{ 'ibm-guardium-insights-2.0.0.tgz' if gi_version_index == '0' else 'ibm-guardium-insights-2.0.1.tgz' if gi_version_index == '1' else 'ibm-guardium-insights-2.0.2.tgz' if gi_version_index == '2' else 'ibm-guardium-insights-2.1.0.tgz' }}"
      gi_version: "{{ '3.0.0' if gi_version_index == '0' else '3.0.1' if gi_version_index == '1' else '3.0.2' if gi_version_index == '2' else '3.1.0' }}"

  - name: Set correct namespace context
    shell:
      cmd: "oc project {{ gi_namespace }}"

  - name: Extract case file
    shell:
      cmd: "tar -C ../gi-temp/gi_offline -xf ../gi-temp/gi_offline/{{ gi_case_archive }}"

  - name: Stop cronjobs
    shell:
      cmd: "oc patch `oc get cronjob -lproject=insights -oname -n={{ gi_namespace }}` -p '{\"spec\" : {\"suspend\" : true }}' -n={{ gi_namespace }}"

  - name: Drain kafka
    shell:
      cmd: ../gi-temp/gi_offline/ibm-guardium-insights/inventory/install/files/support/kafka_drain_test.sh -n gi -v|grep "Kafka system is drained"|wc -l
    register: kafka_drain
    until: "kafka_drain.stdout == \"1\""
    retries: 10
    delay: 30

  - name: Stop Guardium Insights service
    shell:
      chdir: ../gi-temp/gi_offline
      cmd: ibm-guardium-insights/inventory/install/files/support/startorstopGuardiumInsights.sh stop
    when: false

  - name: Wait for pods cleanup
    shell:
      cmd: "oc get pods -n {{ gi_namespace }}|grep Terminating|wc -l"
    register: pods_status
    until: "pods_status.stdout == \"0\""
    retries: 50
    delay: 10

  - name: Stop DB2 instance
    shell:
      cmd: "{{ item }}"
    with_items:
      - "oc exec -it c-{{ gi_namespace }}-db2-db2u-0 -- bash -c \"sudo -u db2inst1 wvcli system disable -m 'Disable HA before Db2 maintenance'\""
