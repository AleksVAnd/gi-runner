- hosts: bastion
  vars:
    internet_type: "{{ lookup('env','GI_INTERNET_ACCESS') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"
    gi_version_index:  "{{ lookup('env','GI_VERSION') }}"
    gi_namespace:  "{{ lookup('env','GI_NAMESPACE_GI') }}"

  tasks:
  - name: Check other configuration parameters
    fail: msg="Variable {{ item.name }} is not set"
    when: item.value == ""
    loop:
      - { name: "GI_INTERNET_ACCESS", value: "{{ internet_type }}" }
      - { name: "GI_DOMAIN", value: "{{ domain }}" }
      - { name: "GI_VERSION", value: "{{ gi_version_index }}" }
      - { name: "GI_NAMESPACE_GI", value: "{{ gi_namespace }}" }

  - name: Set GI installation variables
    set_fact:
      gi_case_archive: "{{ 'ibm-guardium-insights-2.0.0.tgz' if gi_version_index == '0' else 'ibm-guardium-insights-2.0.1.tgz' if gi_version_index == '1' else 'ibm-guardium-insights-2.0.2.tgz' if gi_version_index == '2' else 'ibm-guardium-insights-2.1.0.tgz' }}"
      gi_version: "{{ '3.0.0' if gi_version_index == '0' else '3.0.1' if gi_version_index == '1' else '3.0.2' if gi_version_index == '2' else '3.1.0' }}"

  - name: Set correct namespace context
    shell:
      cmd: "oc project {{ gi_namespace }}"

  - name: Start auxilliary services
    shell:
      cmd: "IFS=\",\" read -r -a sts_i <<< `grep {{ item }} ../gi-temp/aux_size.tmp`;oc scale sts ${sts_i[0]} --replicas ${sts_i[1]} -n {{ gi_namespace }}"
    with_items:
      - "{{ gi_namespace }}-zookeeper"
      - "{{ gi_namespace }}-kafka"
      - "{{ gi_namespace }}-mongodb"
      - "c-{{ gi_namespace }}-redis-m"
      - "c-{{ gi_namespace }}-redis-s"

  - name: Wait for auxilliary services
    shell:
      cmd: "IFS=\",\" read -r -a sts_i <<< `grep {{ item }} ../gi-temp/aux_size.tmp`;if [[ `oc get sts ${sts_i[0]} -o json -n {{ gi_namespace }}|jq '.spec.replicas'` ]] -ne ${sts_i[1]};then exit 1;fi"
    register: sts_status
    until: "sts_status == \"OK\""
    retries: 30
    delay: 15
    with_items:
      - "{{ gi_namespace }}-zookeeper"
      - "{{ gi_namespace }}-kafka"
      - "{{ gi_namespace }}-mongodb"
      - "c-{{ gi_namespace }}-redis-m"
      - "c-{{ gi_namespace }}-redis-s"

  - meta: end_play

  - name: Stop cronjobs
    shell:
      cmd: "oc patch `oc get cronjob -lproject=insights -oname -n={{ gi_namespace }}` -p '{\"spec\" : {\"suspend\" : true }}' -n={{ gi_namespace }}"

  - name: Drain kafka
    shell:
      cmd: ../gi-temp/gi_offline/ibm-guardium-insights/inventory/install/files/support/kafka_drain_test.sh -n gi -v|grep "Kafka system is drained"|wc -l
    register: kafka_drain
    until: "kafka_drain.stdout == \"1\""
    retries: 10
    delay: 30

  - name: Are GI service sizes available?
    stat:
      path: ../gi-temp/gi_offline/.previousGuardiumInsightsReplicas
    register: is_gis_size

  - name: Stop Guardium Insights service
    shell:
      chdir: ../gi-temp/gi_offline
      cmd: ibm-guardium-insights/inventory/install/files/support/startorstopGuardiumInsights.sh stop
    when: is_gis_size.stat.exists == False

  - name: Wait for pods cleanup
    shell:
      cmd: "oc get pods -n {{ gi_namespace }}|grep Terminating|wc -l"
    register: pods_status
    until: "pods_status.stdout == \"0\""
    retries: 50
    delay: 10

  - name: Is DB2 stopped?
    shell:
      cmd: "oc get pods | grep c-{{ gi_namespace }}-db2-db2u | grep -v Pending | wc -l"
    register: is_db2_stopped

  - name: Stop DB2 instance
    shell:
      cmd: "{{ item }}"
    register: cmd_output
    with_items:
      - "oc exec -it c-{{ gi_namespace }}-db2-db2u-0 -- bash -c \"sudo -u db2inst1 wvcli system disable -m 'Disable HA before Db2 maintenance'\""
      - "oc exec -it c-{{ gi_namespace }}-db2-db2u-0 -- bash -c \"sudo -u db2inst1 /mnt/blumeta0/home/db2inst1/sqllib/adm/db2stop\""
      - "oc exec -it c-{{ gi_namespace }}-db2-db2u-0 -- bash -c \"sudo -u db2inst1 /mnt/blumeta0/home/db2inst1/sqllib/bin/ipclean\""
    failed_when: "cmd_output.rc !=0 and cmd_output.stdout is not search('SQL1032N')"
    when: is_db2_stopped.stdout != "0"

  - name: Unlabel DB2 nodes
    shell:
      cmd: "oc patch --type=merge node $(oc get nodes -Licp4data | grep database-db2wh | awk '{print $1}') -p '{\"metadata\":{\"labels\":{\"icp4data\":\"temp-database-db2wh\"}}}'"

  - name: Bounce DB2 
    shell:
      cmd: "{{ item }}"
    with_items:
      - "oc delete pod $(oc get pods | grep c-{{ gi_namespace }}-db2-db2u | awk '{print$1}') -n {{ gi_namespace }}"
      - "oc delete pod $(oc get pods | grep c-{{ gi_namespace }}-db2-etcd | awk '{print$1}') -n {{ gi_namespace }}"
      - "oc delete pod $(oc get pods | grep c-{{ gi_namespace }}-db2-ldap | awk '{print$1}') -n {{ gi_namespace }}"

  - name: Are auxilliary service sizes available?
    stat:
      path: ../gi-temp/aux_size.tmp
    register: is_aux_size

  - name: Get auxilliary services size
    shell:
      cmd: "{{ item }}"
    register: aux_size
    with_items:
      - "oc get sts {{ gi_namespace }}-zookeeper -n {{ gi_namespace }} -o json|jq .spec.replicas"
      - "oc get sts {{ gi_namespace }}-kafka -n {{ gi_namespace }} -o json|jq .spec.replicas"
      - "oc get sts {{ gi_namespace }}-mongodb -n {{ gi_namespace }} -o json|jq .spec.replicas"
      - "oc get sts c-{{ gi_namespace }}-redis-m -n {{ gi_namespace }} -o json|jq .spec.replicas"
      - "oc get sts c-{{ gi_namespace }}-redis-s -n {{ gi_namespace }} -o json|jq .spec.replicas"
    when: is_aux_size.stat.exists == False

  - name: Save auxilliary services size 
    copy:
      dest: ../gi-temp/aux_size.tmp
      content: |
        {{ gi_namespace }}-zookeeper,{{ aux_size['results'][0].stdout }}
        {{ gi_namespace }}-kafka,{{ aux_size['results'][1].stdout }}
        {{ gi_namespace }}-mongodb,{{ aux_size['results'][2].stdout }}
        c-{{ gi_namespace }}-redis-m,{{ aux_size['results'][3].stdout }}
        c-{{ gi_namespace }}-redis-s,{{ aux_size['results'][4].stdout }}
    when: is_aux_size.stat.exists == False

  - name: Stop auxilliary services
    shell:
      cmd: "oc scale sts {{ item }} --replicas=0 -n {{ gi_namespace }}"
    with_items:
      - "{{ gi_namespace }}-zookeeper"
      - "{{ gi_namespace }}-kafka"
      - "{{ gi_namespace }}-mongodb"
      - "c-{{ gi_namespace }}-redis-m"
      - "c-{{ gi_namespace }}-redis-s"

