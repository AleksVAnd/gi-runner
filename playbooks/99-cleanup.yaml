- hosts: all
  vars:
    bas_int: "{{ lookup('env','GI_BASTION_INTERFACE') }}"
    worker_name: "{{ lookup('env', 'GI_WORKER_NAME').split(',') }}"
    domain: "{{ lookup('env','GI_DOMAIN') }}"

  tasks:

    - name: Remove image registry default route
      shell:
        cmd: oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":false}}' --type=merge --config ../ocp/auth/kubeconfig
      ignore_errors: yes

    - name: Wait for API server successful reconfiguration
      shell:
        cmd: "oc get clusteroperators kube-apiserver --config ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
      register: image_registry_status
      until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
      retries: 40
      delay: 10
      when: true
      ignore_errors: yes

    - name: Configure OCP registry with PVC
      shell:
        cmd: "{{ item.cmd }}"
      with_items:
        - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --config ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\": {\"managementState\": \"Unmanaged\"}}'" }
        - { cmd: "oc patch configs.imageregistry.operator.openshift.io/cluster --config ../ocp/auth/kubeconfig --type=merge --patch '{\"spec\":{\"storage\":{}}}'" }
      when: true
      ignore_errors: yes

    - pause:
        seconds: 30

    - name: Wait for Image registry successful reconfiguration
      shell:
        cmd: "oc get clusteroperators image-registry --config ../ocp/auth/kubeconfig --no-headers | awk '{ print $3\":\"$4\":\"$5 }'"
      register: image_registry_status
      until: "image_registry_status.stdout.split(\":\")[0] == \"True\" and image_registry_status.stdout.split(\":\")[1] == \"False\" and image_registry_status.stdout.split(\":\")[2] == \"False\""
      retries: 20
      delay: 10
      when: true
      ignore_errors: yes

    - name: Delete PVC for registry storage
      shell:
        cmd: nohup oc delete -f ../scripts/ocp_registry_pvc.yaml --config ../ocp/auth/kubeconfig
      async: 100
      poll: 0
      ignore_errors: yes

    - pause:
        seconds: 15

    - name: Cleanup finalizer for registry PVC
      shell:
        cmd: "{{ item.cmd }}"
      with_items:
        - { cmd: "oc patch pvc registry -n openshift-image-registry --config ../ocp/auth/kubeconfig --type=merge --patch '{\"metadata\": {\"finalizers\":[]}}'" }
      ignore_errors: yes
      when: true


    - name: Delete rook-ceph cluster
      shell:
        cmd: "{{ item.cmd }}"
      with_items:
        - { cmd: "oc delete -f ../scripts/rook-storage_class_cephfs.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete -f ../scripts/rook-storage_class_rbd.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete -f ../scripts/rook-cluster.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete -f ../scripts/rook-filesystem.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete -f ../scripts/rook-operator.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete -f ../scripts/rook-common.yaml --config ../ocp/auth/kubeconfig" }
        - { cmd: "oc delete namespace rook-ceph" }
      ignore_errors: yes

    - name: remove rook files
      shell:
        cmd: sudo rm -rf /var/lib/rook
      delegate_to: "{{ item }}.{{ domain }}"
      remote_user: core
      args:
        warn: false
      with_items: 
        - "{{ worker_name|list }}"
      ignore_errors: yes

    
    - name: Stop play
      meta: end_play
      when: false

    - name: Stop services
      service:
        name: "{{ item.name }}"
        state: stopped
        enabled: no
      with_items:
        - { name: "matchbox" }
        - { name: "dnsmasq" }
        - { name: "haproxy" }
        - { name: "chronyd" }
      ignore_errors: true

    - name: Restore original HA Proxy config
      copy:
        src: /etc/haproxy/haproxy.cfg.orig
        dest: /etc/haproxy/haproxy.cfg

    - name: Restore original dnsmasq config
      copy:
        src: /etc/dnsmasq.conf.orig
        dest: /etc/dnsmasq.conf

    - name: Restore original chrony config
      copy:
        src: /etc/chrony.conf.orig
        dest: /etc/chrony.conf

    - name: Restore original NIC config
      copy:
        src: "/etc/sysconfig/network-scripts/ifcfg-{{ bas_int }}.orig"
        dest: "/etc/sysconfig/network-scripts/ifcfg-{{ bas_int }}"

    - name: Restart Network Manager
      service:
        name: NetworkManager
        state: restarted
        
    - name: Close ports on bastion
      firewalld:
        port: "{{ item.port }}/{{ item.type }}"
        permanent: yes
        immediate: yes
        state: disabled
      with_items:
        - { port: "67-69", type: "udp" } #dhcp, bootp, tftp
        - { port: "8080", type: "tcp" } #matchbox
        - { port: "53", type: "udp" } #dns
        - { port: "6443", type: "tcp" } #cluster API
        - { port: "22623", type: "tcp" } #cluster API
        - { port: "80", type: "tcp" } #cluster app access
        - { port: "443", type: "tcp" } #cluster app access
        - { port: "123", type: "udp" } #ntpd

    - name: Remove configuration and local files
      file:
        path: "{{ item.path }}"
        state: absent
      with_items:
        - { path: "/etc/systemd/system/matchbox.service" }
        - { path: "/usr/local/bin/matchbox" }
        - { path: "/var/lib/matchbox" }
        - { path: "/var/lib/tftp" }
        - { path: "../ocp" }
        - { path: "/etc/haproxy/haproxy.cfg" }

    - name: Remove matchbox user
      user:
        name: matchbox
        state: absent

    - name: Uninstall Python libraries
      pip:
        name: "dnspython"
        state: "absent"
      when: false
  
    - name: Remove software packages
      dnf:
        name:
          - "git"
          - "haproxy"
          - "policycoreutils-python-utils"
          - "tar"
          - "unzip"
          - "ipxe-bootimgs"
          - "bind_utils"
          - "dnsmasq"
        state: "absent"
        autoremove: yes
      when: false

