- name: Create portable registry directories
  file:
    path: "{{ item.path }}"
    state: directory
  with_items:
    - { path: "/opt/registry/auth" }
    - { path: "/opt/registry/certs" }
          #        - { path: "../ssl/csr" }
  when: internet_type == 'A'

- name: Create certificate for registry
  shell:
    cmd: "openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/bastion.repo.pem -x509 -days 365 -out /opt/registry/certs/bastion.repo.crt -subj \"/C=PL/ST=Miedzyrzecz/L=/O=Test /OU=Test/CN=registry.{{ domain }}\" -addext \"subjectAltName = DNS:registry.{{ domain }}\""
  when: internet_type == 'A'

- name: Copy CA cert to Centos PKI
  copy:
    src: /opt/registry/certs/bastion.repo.crt
    dest: /etc/pki/ca-trust/source/anchors/
  when: internet_type == 'A'

- name: Register self-signed CA
  shell:
    cmd: update-ca-trust extract
  when: internet_type == 'A'

- name: Cleanup httpasswd file
  file:
    path: /opt/registry/auth/bastion.repo.htpasswd
    state: absent
  when: internet_type == 'A'

- name: Create htpasswd file
  htpasswd:
    path: /opt/registry/auth/bastion.repo.htpasswd
    name: "{{ repo_user }}"
    crypt_scheme: bcrypt
    password: "{{ repo_user_password }}"
  when: internet_type == 'A'

- name: Start firewall
  service:
    name: firewalld
    state: started
    enabled: yes

- name: Open ports on bastion for offline installation
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - { port: "5000", type: "tcp" }
  when: internet_type == 'A'

- name: Open ports on bastion for offline installation
  firewalld:
    service: http
    permanent: yes
    state: enabled

- name: Load image registry into local repository
  shell:
    cmd: "podman load -i {{ temp_dir }}/coreos/oc-registry.tar"
  when: internet_type == 'A'

- name: Check image repository existence
  shell:
    cmd: podman ps -a|grep bastion-registry|wc -l
  register: is_repo_available
  when: internet_type == 'A'

- name: Remove existing bastion image registry container
  shell:
    cmd: "{{ item }}"
  loop:
    - podman stop bastion-registry
    - "podman container prune <<< 'Y'"
  when: internet_type == 'A' and is_repo_available.stdout == '1'

- name: Setup image registry
  shell:
    cmd: 'podman run -d --name bastion-registry -p 5000:5000 -v /opt/registry/data:/var/lib/registry:z -v /opt/registry/auth:/auth:z -e "REGISTRY_AUTH=htpasswd" -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry" -e "REGISTRY_HTTP_SECRET=ALongRandomSecretForRegistry" -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/bastion.repo.htpasswd -v /opt/registry/certs:/certs:z -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/bastion.repo.crt -e REGISTRY_HTTP_TLS_KEY=/certs/bastion.repo.pem docker.io/library/registry:{{ registry_version }}'
    chdir: /opt/registry
  when: internet_type == 'A'

- name: Set SELINUX permissive access for NetworkManager
  shell:
    cmd: semanage permissive -a NetworkManager_t

- name: Install ansible galaxy packages
  shell:
    cmd: ansible-galaxy collection install community.general
  when: install_ldap == 'Y' and internet_type != 'A'


