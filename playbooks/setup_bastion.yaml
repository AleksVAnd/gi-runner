     - name: Create portable registry directories
      file:
        path: "{{ item.path }}"
        state: directory
      with_items:
        - { path: "/opt/registry/auth" }
        - { path: "/opt/registry/certs" }
          #        - { path: "../ssl/csr" }
      when: internet_type == 'A'

    - name: Create certificate for registry
      shell:
        cmd: "openssl req -newkey rsa:4096 -nodes -sha256 -keyout /opt/registry/certs/bastion.repo.pem -x509 -days 365 -out /opt/registry/certs/bastion.repo.crt -subj \"/C=PL/ST=Miedzyrzecz/L=/O=Test /OU=Test/CN=registry.{{ domain }}\" -addext \"subjectAltName = DNS:registry.{{ domain }}\""
      when: internet_type == 'A'

    - name: Copy CA cert to Centos PKI
      copy:
        src: /opt/registry/certs/bastion.repo.crt
        dest: /etc/pki/ca-trust/source/anchors/
      when: internet_type == 'A'

    - name: Register self-signed CA
      shell:
        cmd: update-ca-trust extract
      when: internet_type == 'A'

    - name: Cleanup httpasswd file
      file:
        path: /opt/registry/auth/bastion.repo.htpasswd
        state: absent
      when: internet_type == 'A'

    - name: Create htpasswd file
      htpasswd:
        path: /opt/registry/auth/bastion.repo.htpasswd
        name: "{{ repo_user }}"
        crypt_scheme: bcrypt
        password: "{{ repo_user_password }}"
      when: internet_type == 'A'

    - name: Start firewall
      service:
        name: firewalld
        state: started
        enabled: yes

     - name: Open ports on bastion for offline installation
      firewalld:
        port: "{{ item.port }}/{{ item.type }}"
        permanent: yes
        immediate: yes
        state: enabled
      with_items:
        - { port: "5000", type: "tcp" }
      when: internet_type == 'A'

    - name: Open ports on bastion for offline installation
      firewalld:
        service: http
        permanent: yes
        state: enabled

    - name: Load image registry into local repository
      shell:
        cmd: "podman load -i {{ temp_dir }}/coreos/oc-registry.tar"
      when: internet_type == 'A'

     - name: Check image repository existence
      shell:
        cmd: podman ps -a|grep bastion-registry|wc -l
      register: is_repo_available
      when: internet_type == 'A'

    - name: Remove existing bastion image registry container
      shell:
        cmd: "{{ item }}"
      loop:
        - podman stop bastion-registry
        - "podman container prune <<< 'Y'"
      when: internet_type == 'A' and is_repo_available.stdout == '1'


