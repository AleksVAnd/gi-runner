- name: Waiting for OCP cluster deployment (it takes 15-40 minutes)
  command: openshift-install --dir=../ocp wait-for bootstrap-complete

- name: Check bootstrap availability
  command:
    cmd: "ping -c 1 {{ boot_name }}.{{ domain }}"
  register: boot_availability
  ignore_errors: yes

- name: Stop bootstrap
  shell:
    cmd: "ssh -l core {{ boot_name }}.{{ domain }} -i {{ ssh_key }} sudo shutdown -h +1"
  remote_user: core
  args:
    warn: false
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Wait for boostrap shutdown
  pause:
    minutes: 1
  when: boot_availability.rc != 2 and boot_availability.rc != 1

- name: Remove DNS records
  lineinfile:
    path: /etc/dnsmasq.conf
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: "^address=/matchbox." }
    - { regexp: "^address=/boot." }
    - { regexp: "^#TFTP" }
    - { regexp: "^tftp-" }
    - { regexp: "^enable-tftp" }
    - { regexp: "^dhcp-match" }
    - { regexp: "^dhcp-boot" }
    - { regexp: "^dhcp-userclass" }

- name: Restart dnsmasq
  service:
    name: dnsmasq
    state: restarted
    enabled: yes

- name: Stop unused services
  service:
    name: "{{ item.name }}"
    state: stopped
    enabled: no
  with_items:
    - { name: "matchbox" }

- name: Reconfigure HA Proxy
  lineinfile:
    path: /etc/haproxy/haproxy.cfg
    regexp: "{{ item.regexp }}"
    state: absent
  with_items:
    - { regexp: '^ server m0' }

- name: Restart HA Proxy
  service:
    name: haproxy
    state: restarted
    enabled: yes

- name: Copy main HA Proxy config file
  copy:
    src: /etc/haproxy/haproxy.cfg
    dest: /etc/haproxy/haproxy.cfg.main

- name: Check cluster nodes health and approve CSR's if needed
  vars:
    node_number: "{{ master_ip|length+worker_ip|default([])|length+ocs_ip|default([])|length }}"
  shell: ../scripts/check_cluster_health.sh
  register: cluster_health
  until: node_number == cluster_health.stdout
  retries: 30
  delay: 60

- name: Wait for cluster operators
  shell:
    cmd: "oc get co --no-headers|awk '{ print $3$4$5 }'|grep -v TrueFalseFalse|wc -l"
  register: co_status
  until: "co_status.stdout == \"0\""
  retries: 150
  delay: 10

- name: Is htpasswd secret available
  shell:
    cmd: "oc get secret htpass-secret -n openshift-config -oname|wc -l"
  register: is_htpasswd_secret

- name: Create htpasswd file
  htpasswd:
    path: "{{ temp_dir }}/ocadmin.htpasswd"
    name: "{{ ocadmin }}"
    password: "{{ ocadmin_password }}"
  when: is_htpasswd_secret.stdout|int == 0

- name: Register htpasswd file in OCP
  shell:
    cmd: "{{ item.cmd }}"
  with_items:
    - { cmd: "oc create secret generic htpass-secret --from-file=htpasswd=../gi-temp/ocadmin.htpasswd -n openshift-config" }
    - { cmd: "oc apply -f ../scripts/oauth_provider.yaml" }
    - { cmd: "oc adm policy add-cluster-role-to-user cluster-admin {{ ocadmin }}" }
  ignore_errors: no #if htpasswd has been imported before
  when: is_htpasswd_secret.stdout|int == 0

- name: Disable default image sources
  shell:
    cmd: "oc patch OperatorHub cluster --type json -p '[{\"op\": \"add\", \"path\": \"/spec/disableAllDefaultSources\", \"value\": true}]'"
  when: internet_type == 'A'

- name: Wait 1 minute before adding admin
  pause:
    minutes: 1
  when: is_htpasswd_secret.stdout|int == 0

- name: Identify image registry name in the import
  shell:
    cmd: "cd {{ temp_dir }}/olm/manifests-redhat-operator-index;cat catalogSource.yaml | grep image | awk '{print $2}'| awk -F':' '{print $1}'"
  register: old_registry_name
  when: internet_type == 'A'

- name: Copy OLM conf file for modification
  copy:
    src: "{{ temp_dir }}/olm/"
    dest: "{{ temp_dir }}/olm_copy/"
  when: internet_type == 'A'

- name: Set correct image registry mirror name in catalogSources
  shell:
    cmd: "sed -i 's/{{ old_registry_name.stdout }}/registry.{{ domain }}/g' catalogSource.yaml"
    chdir: "{{ temp_dir }}/olm_copy/{{ item }}"
    warn: false
  with_items:
    - manifests-redhat-operator-index
    - manifests-certified-operator-index
    - manifests-redhat-marketplace-index
    - manifests-community-operator-index
  when: internet_type == 'A'

- name: Set correct image registry mirror name in imageContentSourcePolicy
  shell:
    cmd: "sed -i 's/{{ old_registry_name.stdout }}/registry.{{ domain }}/g' imageContentSourcePolicy.yaml"
    chdir: "{{ temp_dir }}/olm_copy/{{ item }}"
    warn: false
  with_items:
    - manifests-redhat-operator-index
    - manifests-certified-operator-index
    - manifests-redhat-marketplace-index
    - manifests-community-operator-index
  when: internet_type == 'A'

- name: Configure mirrored catalogSources
  shell:
    cmd: "oc apply -f catalogSource.yaml"
    chdir: "{{ temp_dir }}/olm_copy/{{ item }}"
    warn: false
  with_items:
    - manifests-redhat-operator-index
    - manifests-certified-operator-index
    - manifests-redhat-marketplace-index
    - manifests-community-operator-index
  when: internet_type == 'A'

- name: Configure mirrored imageContentSourcePolicy.yaml
  shell:
    cmd: "oc apply -f imageContentSourcePolicy.yaml"
    chdir: "{{ temp_dir }}/olm_copy/{{ item }}"
    warn: false
  with_items:
    - manifests-redhat-operator-index
    - manifests-certified-operator-index
    - manifests-redhat-marketplace-index
    - manifests-community-operator-index
  when: internet_type == 'A'

- name: Clean manifests in temp directory
  shell:
    cmd: "rm -rf {{ temp_dir }}/olm_copy"
  when: internet_type == 'A'

- name: Wait - cluster stabilization
  pause:
    minutes: "8|int if ocp_release|int < 3 else 1|int"
  when: internet_type == 'A'
